{"ast":null,"code":"import { useLayoutEffect, useEffect, useState, useRef, useMemo, createElement, createContext, useCallback, useContext, Fragment, isValidElement, cloneElement, forwardRef, useReducer, createRef } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nvar useIsoMorphicEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect; // didn't take care of the Suspense case. To fix this we used the approach the @reach-ui/auto-id\n// uses.\n//\n// Credits: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n\nvar state = {\n  serverHandoffComplete: false\n};\nvar id = 0;\n\nfunction generateId() {\n  return ++id;\n}\n\nfunction useId() {\n  var _React$useState = useState(state.serverHandoffComplete ? generateId : null),\n      id = _React$useState[0],\n      setId = _React$useState[1];\n\n  useIsoMorphicEffect(function () {\n    if (id === null) setId(generateId()); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(function () {\n    if (state.serverHandoffComplete === false) state.serverHandoffComplete = true;\n  }, []);\n  return id != null ? '' + id : undefined;\n}\n\nfunction useIsInitialRender() {\n  var initial = useRef(true);\n  useEffect(function () {\n    initial.current = false;\n  }, []);\n  return initial.current;\n}\n\nfunction useIsMounted() {\n  var mounted = useRef(true);\n  useEffect(function () {\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  return mounted;\n}\n\nfunction match(value, lookup) {\n  if (value in lookup) {\n    var returnValue = lookup[value];\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return typeof returnValue === 'function' ? returnValue.apply(void 0, args) : returnValue;\n  }\n\n  var error = new Error(\"Tried to handle \\\"\" + value + \"\\\" but there is no handler defined. Only defined handlers are: \" + Object.keys(lookup).map(function (key) {\n    return \"\\\"\" + key + \"\\\"\";\n  }).join(', ') + \".\");\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(error, match);\n  }\n\n  throw error;\n}\n\nfunction once(cb) {\n  var state = {\n    called: false\n  };\n  return function () {\n    if (state.called) {\n      return;\n    }\n\n    state.called = true;\n    return cb.apply(void 0, arguments);\n  };\n}\n\nfunction disposables() {\n  var disposables = [];\n  var api = {\n    requestAnimationFrame: function (_requestAnimationFrame) {\n      function requestAnimationFrame() {\n        return _requestAnimationFrame.apply(this, arguments);\n      }\n\n      requestAnimationFrame.toString = function () {\n        return _requestAnimationFrame.toString();\n      };\n\n      return requestAnimationFrame;\n    }(function () {\n      var raf = requestAnimationFrame.apply(void 0, arguments);\n      api.add(function () {\n        return cancelAnimationFrame(raf);\n      });\n    }),\n    nextFrame: function nextFrame() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      api.requestAnimationFrame(function () {\n        api.requestAnimationFrame.apply(api, args);\n      });\n    },\n    setTimeout: function (_setTimeout) {\n      function setTimeout() {\n        return _setTimeout.apply(this, arguments);\n      }\n\n      setTimeout.toString = function () {\n        return _setTimeout.toString();\n      };\n\n      return setTimeout;\n    }(function () {\n      var timer = setTimeout.apply(void 0, arguments);\n      api.add(function () {\n        return clearTimeout(timer);\n      });\n    }),\n    add: function add(cb) {\n      disposables.push(cb);\n    },\n    dispose: function dispose() {\n      disposables.splice(0).forEach(function (dispose) {\n        return dispose();\n      });\n    }\n  };\n  return api;\n}\n\nfunction addClasses(node) {\n  var _node$classList;\n\n  for (var _len = arguments.length, classes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    classes[_key - 1] = arguments[_key];\n  }\n\n  node && classes.length > 0 && (_node$classList = node.classList).add.apply(_node$classList, classes);\n}\n\nfunction removeClasses(node) {\n  var _node$classList2;\n\n  for (var _len2 = arguments.length, classes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    classes[_key2 - 1] = arguments[_key2];\n  }\n\n  node && classes.length > 0 && (_node$classList2 = node.classList).remove.apply(_node$classList2, classes);\n}\n\nvar Reason;\n\n(function (Reason) {\n  Reason[\"Finished\"] = \"finished\";\n  Reason[\"Cancelled\"] = \"cancelled\";\n})(Reason || (Reason = {}));\n\nfunction waitForTransition(node, done) {\n  var d = disposables();\n  if (!node) return d.dispose; // Safari returns a comma separated list of values, so let's sort them and take the highest value.\n\n  var _getComputedStyle = getComputedStyle(node),\n      transitionDuration = _getComputedStyle.transitionDuration,\n      transitionDelay = _getComputedStyle.transitionDelay;\n\n  var _map = [transitionDuration, transitionDelay].map(function (value) {\n    var _value$split$filter$m = value.split(',') // Remove falseys we can't work with\n    .filter(Boolean) // Values are returned as `0.3s` or `75ms`\n    .map(function (v) {\n      return v.includes('ms') ? parseFloat(v) : parseFloat(v) * 1000;\n    }).sort(function (a, z) {\n      return z - a;\n    }),\n        _value$split$filter$m2 = _value$split$filter$m[0],\n        resolvedValue = _value$split$filter$m2 === void 0 ? 0 : _value$split$filter$m2;\n\n    return resolvedValue;\n  }),\n      durationMs = _map[0],\n      delaysMs = _map[1]; // Waiting for the transition to end. We could use the `transitionend` event, however when no\n  // actual transition/duration is defined then the `transitionend` event is not fired.\n  //\n  // TODO: Downside is, when you slow down transitions via devtools this timeout is still using the\n  // full 100% speed instead of the 25% or 10%.\n\n\n  if (durationMs !== 0) {\n    d.setTimeout(function () {\n      done(Reason.Finished);\n    }, durationMs + delaysMs);\n  } else {\n    // No transition is happening, so we should cleanup already. Otherwise we have to wait until we\n    // get disposed.\n    done(Reason.Finished);\n  } // If we get disposed before the timeout runs we should cleanup anyway\n\n\n  d.add(function () {\n    return done(Reason.Cancelled);\n  });\n  return d.dispose;\n}\n\nfunction transition(node, base, from, to, done) {\n  var d = disposables();\n\n  var _done = done !== undefined ? once(done) : function () {};\n\n  addClasses.apply(void 0, [node].concat(base, from));\n  d.nextFrame(function () {\n    removeClasses.apply(void 0, [node].concat(from));\n    addClasses.apply(void 0, [node].concat(to));\n    d.add(waitForTransition(node, function (reason) {\n      removeClasses.apply(void 0, [node].concat(to, base));\n      return _done(reason);\n    }));\n  }); // Once we get disposed, we should ensure that we cleanup after ourselves. In case of an unmount,\n  // the node itself will be nullified and will be a no-op. In case of a full transition the classes\n  // are already removed which is also a no-op. However if you go from enter -> leave mid-transition\n  // then we have some leftovers that should be cleaned.\n\n  d.add(function () {\n    return removeClasses.apply(void 0, [node].concat(base, from, to));\n  }); // When we get disposed early, than we should also call the done method but switch the reason.\n\n  d.add(function () {\n    return _done(Reason.Cancelled);\n  });\n  return d.dispose;\n}\n\nfunction useSplitClasses(classes) {\n  if (classes === void 0) {\n    classes = '';\n  }\n\n  return useMemo(function () {\n    return classes.split(' ').filter(function (className) {\n      return className.trim().length > 1;\n    });\n  }, [classes]);\n}\n\nvar TransitionContext = /*#__PURE__*/createContext(null);\nvar TreeStates;\n\n(function (TreeStates) {\n  TreeStates[\"Visible\"] = \"visible\";\n  TreeStates[\"Hidden\"] = \"hidden\";\n})(TreeStates || (TreeStates = {}));\n\nfunction useTransitionContext() {\n  var context = useContext(TransitionContext);\n\n  if (context === null) {\n    throw new Error('A <Transition.Child /> is used but it is missing a parent <Transition />.');\n  }\n\n  return context;\n}\n\nfunction useParentNesting() {\n  var context = useContext(NestingContext);\n\n  if (context === null) {\n    throw new Error('A <Transition.Child /> is used but it is missing a parent <Transition />.');\n  }\n\n  return context;\n}\n\nvar NestingContext = /*#__PURE__*/createContext(null);\n\nfunction useNesting(done) {\n  var doneRef = useRef(done);\n  var transitionableChildren = useRef([]);\n  var mounted = useIsMounted();\n  useEffect(function () {\n    doneRef.current = done;\n  }, [done]);\n  var unregister = useCallback(function (childId) {\n    var idx = transitionableChildren.current.indexOf(childId);\n    if (idx === -1) return;\n    transitionableChildren.current.splice(idx, 1);\n\n    if (transitionableChildren.current.length <= 0 && mounted.current) {\n      var _doneRef$current;\n\n      (_doneRef$current = doneRef.current) === null || _doneRef$current === void 0 ? void 0 : _doneRef$current.call(doneRef);\n    }\n  }, [doneRef, mounted, transitionableChildren]);\n  var register = useCallback(function (childId) {\n    transitionableChildren.current.push(childId);\n    return function () {\n      return unregister(childId);\n    };\n  }, [transitionableChildren, unregister]);\n  return useMemo(function () {\n    return {\n      children: transitionableChildren,\n      register: register,\n      unregister: unregister\n    };\n  }, [register, unregister, transitionableChildren]);\n}\n\nfunction TransitionChild(props) {\n  var children = props.children,\n      enter = props.enter,\n      enterFrom = props.enterFrom,\n      enterTo = props.enterTo,\n      leave = props.leave,\n      leaveFrom = props.leaveFrom,\n      leaveTo = props.leaveTo,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"enter\", \"enterFrom\", \"enterTo\", \"leave\", \"leaveFrom\", \"leaveTo\"]);\n\n  var container = useRef(null);\n\n  var _React$useState = useState(TreeStates.Visible),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var _useTransitionContext = useTransitionContext(),\n      show = _useTransitionContext.show,\n      appear = _useTransitionContext.appear;\n\n  var _useParentNesting = useParentNesting(),\n      register = _useParentNesting.register,\n      unregister = _useParentNesting.unregister;\n\n  var initial = useIsInitialRender();\n  var id = useId();\n  var isTransitioning = useRef(false);\n  var nesting = useNesting(function () {\n    // When all children have been unmounted we can only hide ourselves if and only if we are not\n    // transitioning ourserlves. Otherwise we would unmount before the transitions are finished.\n    if (!isTransitioning.current) {\n      setState(TreeStates.Hidden);\n      unregister(id);\n    }\n  });\n  useIsoMorphicEffect(function () {\n    if (!id) return;\n    return register(id);\n  }, [register, id]);\n  var enterClasses = useSplitClasses(enter);\n  var enterFromClasses = useSplitClasses(enterFrom);\n  var enterToClasses = useSplitClasses(enterTo);\n  var leaveClasses = useSplitClasses(leave);\n  var leaveFromClasses = useSplitClasses(leaveFrom);\n  var leaveToClasses = useSplitClasses(leaveTo);\n  useEffect(function () {\n    if (state === TreeStates.Visible && container.current === null) {\n      throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?');\n    }\n  }, [container, state]); // Skipping initial transition\n\n  var skip = initial && !appear;\n  useIsoMorphicEffect(function () {\n    var node = container.current;\n    if (!node) return;\n    if (skip) return;\n    isTransitioning.current = true;\n    return show ? transition(node, enterClasses, enterFromClasses, enterToClasses, function () {\n      isTransitioning.current = false;\n    }) : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, function (reason) {\n      isTransitioning.current = false;\n      if (reason !== Reason.Finished) return; // When we don't have children anymore we can safely unregister from the parent and hide\n      // ourselves.\n\n      if (nesting.children.current.length <= 0) {\n        setState(TreeStates.Hidden);\n        unregister(id);\n      }\n    });\n  }, [id, isTransitioning, unregister, nesting, container, skip, show, enterClasses, enterFromClasses, enterToClasses, leaveClasses, leaveFromClasses, leaveToClasses]); // Unmount the whole tree\n\n  if (state === TreeStates.Hidden) return null;\n\n  if (typeof children === 'function') {\n    return createElement(NestingContext.Provider, {\n      value: nesting\n    }, children(container));\n  }\n\n  var _rest$as = rest.as,\n      Component = _rest$as === void 0 ? 'div' : _rest$as,\n      passthroughProps = _objectWithoutPropertiesLoose(rest, [\"as\"]);\n\n  return createElement(NestingContext.Provider, {\n    value: nesting\n  }, createElement(Component, Object.assign({}, passthroughProps, {\n    ref: container\n  }), children));\n}\n\nfunction Transition(props) {\n  var _match;\n\n  var show = props.show,\n      _props$appear = props.appear,\n      appear = _props$appear === void 0 ? false : _props$appear,\n      rest = _objectWithoutPropertiesLoose(props, [\"show\", \"appear\"]);\n\n  if (![true, false].includes(show)) {\n    throw new Error('A <Transition /> is used but it is missing a `show={true | false}` prop.');\n  }\n\n  var _React$useState2 = useState(show ? TreeStates.Visible : TreeStates.Hidden),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var nestingBag = useNesting(function () {\n    setState(TreeStates.Hidden);\n  });\n  var initial = useIsInitialRender();\n  var transitionBag = useMemo(function () {\n    return {\n      show: show,\n      appear: appear || !initial\n    };\n  }, [show, appear, initial]);\n  useEffect(function () {\n    if (show) {\n      setState(TreeStates.Visible);\n    } else if (nestingBag.children.current.length <= 0) {\n      setState(TreeStates.Hidden);\n    }\n  }, [show, nestingBag]);\n  return createElement(NestingContext.Provider, {\n    value: nestingBag\n  }, createElement(TransitionContext.Provider, {\n    value: transitionBag\n  }, match(state, (_match = {}, _match[TreeStates.Visible] = function () {\n    return createElement(TransitionChild, Object.assign({}, rest));\n  }, _match[TreeStates.Hidden] = null, _match))));\n}\n\nTransition.Child = TransitionChild;\n\nfunction render(props, bag, tag) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? tag : _props$as,\n      children = props.children,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"as\", \"children\"]);\n\n  var resolvedChildren = typeof children === 'function' ? children(bag) : children;\n\n  if (Component === Fragment) {\n    if (Object.keys(passThroughProps).length > 0) {\n      if (Array.isArray(resolvedChildren) && resolvedChildren.length > 1) {\n        var err = new Error('You should only render 1 child');\n        if (Error.captureStackTrace) Error.captureStackTrace(err, render);\n        throw err;\n      }\n\n      if (!isValidElement(resolvedChildren)) {\n        var _err = new Error(\"You should render an element as a child. Did you forget the as=\\\"...\\\" prop?\");\n\n        if (Error.captureStackTrace) Error.captureStackTrace(_err, render);\n        throw _err;\n      }\n\n      return cloneElement(resolvedChildren, // Filter out undefined values so that they don't override the existing values\n      mergeEventFunctions(compact(passThroughProps), resolvedChildren.props, ['onClick']));\n    }\n  }\n\n  return createElement(Component, passThroughProps, resolvedChildren);\n}\n/**\r\n * We can use this function for the following useCase:\r\n *\r\n * <Menu.Item> <button onClick={console.log} /> </Menu.Item>\r\n *\r\n * Our `Menu.Item` will have an internal `onClick`, if you passthrough an `onClick` to the actual\r\n * `Menu.Item` component we will call it correctly. However, when we have an `onClick` on the actual\r\n * first child, that one should _also_ be called (but before this implementation, it was just\r\n * overriding the `onClick`). But it is only when we *render* that we have access to the existing\r\n * props of this component.\r\n *\r\n * It's a bit hacky, and not that clean, but it is something internal and we have tests to rely on\r\n * so that we can refactor this later (if needed).\r\n */\n\n\nfunction mergeEventFunctions(passThroughProps, existingProps, functionsToMerge) {\n  var clone = Object.assign({}, passThroughProps);\n\n  var _loop = function _loop() {\n    var func = _step.value;\n\n    if (passThroughProps[func] !== undefined && existingProps[func] !== undefined) {\n      var _Object$assign;\n\n      Object.assign(clone, (_Object$assign = {}, _Object$assign[func] = function (event) {\n        // Props we control\n        if (!event.defaultPrevented) passThroughProps[func](event); // Existing props on the component\n\n        if (!event.defaultPrevented) existingProps[func](event);\n      }, _Object$assign));\n    }\n  };\n\n  for (var _iterator = _createForOfIteratorHelperLoose(functionsToMerge), _step; !(_step = _iterator()).done;) {\n    _loop();\n  }\n\n  return clone;\n}\n/**\r\n * This is a hack, but basically we want to keep the full 'API' of the component, but we do want to\r\n * wrap it in a forwardRef so that we _can_ passthrough the ref\r\n */\n\n\nfunction forwardRefWithAs(component) {\n  return forwardRef(component);\n}\n\nfunction compact(object) {\n  var clone = Object.assign({}, object);\n\n  for (var key in clone) {\n    if (clone[key] === undefined) delete clone[key];\n  }\n\n  return clone;\n}\n\nfunction useDisposables() {\n  // Using useState instead of useRef so that we can use the initializer function.\n  var _React$useState = useState(disposables),\n      d = _React$useState[0];\n\n  useEffect(function () {\n    return function () {\n      return d.dispose();\n    };\n  }, [d]);\n  return d;\n}\n\nfunction useSyncRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return useCallback(function (value) {\n    refs.forEach(function (ref) {\n      if (ref === null) return;\n      if (typeof ref === 'function') return ref(value);\n      ref.current = value;\n    });\n  }, [refs]);\n} // TODO: This must already exist somewhere, right? 🤔\n// Ref: https://www.w3.org/TR/uievents-key/#named-key-attribute-values\n\n\nvar Keys;\n\n(function (Keys) {\n  Keys[\"Space\"] = \" \";\n  Keys[\"Enter\"] = \"Enter\";\n  Keys[\"Escape\"] = \"Escape\";\n  Keys[\"Backspace\"] = \"Backspace\";\n  Keys[\"ArrowUp\"] = \"ArrowUp\";\n  Keys[\"ArrowDown\"] = \"ArrowDown\";\n  Keys[\"Home\"] = \"Home\";\n  Keys[\"End\"] = \"End\";\n  Keys[\"PageUp\"] = \"PageUp\";\n  Keys[\"PageDown\"] = \"PageDown\";\n  Keys[\"Tab\"] = \"Tab\";\n})(Keys || (Keys = {}));\n\nvar _reducers;\n\nvar MenuStates;\n\n(function (MenuStates) {\n  MenuStates[MenuStates[\"Open\"] = 0] = \"Open\";\n  MenuStates[MenuStates[\"Closed\"] = 1] = \"Closed\";\n})(MenuStates || (MenuStates = {}));\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"OpenMenu\"] = 0] = \"OpenMenu\";\n  ActionTypes[ActionTypes[\"CloseMenu\"] = 1] = \"CloseMenu\";\n  ActionTypes[ActionTypes[\"GoToItem\"] = 2] = \"GoToItem\";\n  ActionTypes[ActionTypes[\"Search\"] = 3] = \"Search\";\n  ActionTypes[ActionTypes[\"ClearSearch\"] = 4] = \"ClearSearch\";\n  ActionTypes[ActionTypes[\"RegisterItem\"] = 5] = \"RegisterItem\";\n  ActionTypes[ActionTypes[\"UnregisterItem\"] = 6] = \"UnregisterItem\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar Focus;\n\n(function (Focus) {\n  Focus[Focus[\"FirstItem\"] = 0] = \"FirstItem\";\n  Focus[Focus[\"PreviousItem\"] = 1] = \"PreviousItem\";\n  Focus[Focus[\"NextItem\"] = 2] = \"NextItem\";\n  Focus[Focus[\"LastItem\"] = 3] = \"LastItem\";\n  Focus[Focus[\"SpecificItem\"] = 4] = \"SpecificItem\";\n  Focus[Focus[\"Nothing\"] = 5] = \"Nothing\";\n})(Focus || (Focus = {}));\n\nfunction calculateActiveItemIndex(state, focus, id) {\n  var _state$activeItemInde, _match;\n\n  if (state.items.length <= 0) return null;\n  var items = state.items;\n  var activeItemIndex = (_state$activeItemInde = state.activeItemIndex) !== null && _state$activeItemInde !== void 0 ? _state$activeItemInde : -1;\n  var nextActiveIndex = match(focus, (_match = {}, _match[Focus.FirstItem] = function () {\n    return items.findIndex(function (item) {\n      return !item.dataRef.current.disabled;\n    });\n  }, _match[Focus.PreviousItem] = function () {\n    var idx = items.slice().reverse().findIndex(function (item, idx, all) {\n      if (activeItemIndex !== -1 && all.length - idx - 1 >= activeItemIndex) return false;\n      return !item.dataRef.current.disabled;\n    });\n    if (idx === -1) return idx;\n    return items.length - 1 - idx;\n  }, _match[Focus.NextItem] = function () {\n    return items.findIndex(function (item, idx) {\n      if (idx <= activeItemIndex) return false;\n      return !item.dataRef.current.disabled;\n    });\n  }, _match[Focus.LastItem] = function () {\n    var idx = items.slice().reverse().findIndex(function (item) {\n      return !item.dataRef.current.disabled;\n    });\n    if (idx === -1) return idx;\n    return items.length - 1 - idx;\n  }, _match[Focus.SpecificItem] = function () {\n    return items.findIndex(function (item) {\n      return item.id === id;\n    });\n  }, _match[Focus.Nothing] = function () {\n    return null;\n  }, _match));\n  if (nextActiveIndex === -1) return state.activeItemIndex;\n  return nextActiveIndex;\n}\n\nvar reducers = (_reducers = {}, _reducers[ActionTypes.CloseMenu] = function (state) {\n  return _extends({}, state, {\n    menuState: MenuStates.Closed\n  });\n}, _reducers[ActionTypes.OpenMenu] = function (state) {\n  return _extends({}, state, {\n    menuState: MenuStates.Open\n  });\n}, _reducers[ActionTypes.GoToItem] = function (state, action) {\n  var activeItemIndex = calculateActiveItemIndex(state, action.focus, action.id);\n\n  if (state.searchQuery === '' && state.activeItemIndex === activeItemIndex) {\n    return state;\n  }\n\n  return _extends({}, state, {\n    searchQuery: '',\n    activeItemIndex: activeItemIndex\n  });\n}, _reducers[ActionTypes.Search] = function (state, action) {\n  var searchQuery = state.searchQuery + action.value;\n  var match = state.items.findIndex(function (item) {\n    var _item$dataRef$current;\n\n    return ((_item$dataRef$current = item.dataRef.current.textValue) === null || _item$dataRef$current === void 0 ? void 0 : _item$dataRef$current.startsWith(searchQuery)) && !item.dataRef.current.disabled;\n  });\n\n  if (match === -1 || match === state.activeItemIndex) {\n    return _extends({}, state, {\n      searchQuery: searchQuery\n    });\n  }\n\n  return _extends({}, state, {\n    searchQuery: searchQuery,\n    activeItemIndex: match\n  });\n}, _reducers[ActionTypes.ClearSearch] = function (state) {\n  return _extends({}, state, {\n    searchQuery: ''\n  });\n}, _reducers[ActionTypes.RegisterItem] = function (state, action) {\n  return _extends({}, state, {\n    items: [].concat(state.items, [{\n      id: action.id,\n      dataRef: action.dataRef\n    }])\n  });\n}, _reducers[ActionTypes.UnregisterItem] = function (state, action) {\n  var nextItems = state.items.slice();\n  var currentActiveItem = state.activeItemIndex !== null ? nextItems[state.activeItemIndex] : null;\n  var idx = nextItems.findIndex(function (a) {\n    return a.id === action.id;\n  });\n  if (idx !== -1) nextItems.splice(idx, 1);\n  return _extends({}, state, {\n    items: nextItems,\n    activeItemIndex: function () {\n      if (idx === state.activeItemIndex) return null;\n      if (currentActiveItem === null) return null; // If we removed the item before the actual active index, then it would be out of sync. To\n      // fix this, we will find the correct (new) index position.\n\n      return nextItems.indexOf(currentActiveItem);\n    }()\n  });\n}, _reducers);\nvar MenuContext = /*#__PURE__*/createContext(null);\n\nfunction useMenuContext(component) {\n  var context = useContext(MenuContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Menu.name + \" /> component.\");\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(err, useMenuContext);\n    }\n\n    throw err;\n  }\n\n  return context;\n}\n\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\n\nvar DEFAULT_MENU_TAG = Fragment;\n\nfunction Menu(props) {\n  var d = useDisposables();\n  var reducerBag = useReducer(stateReducer, {\n    menuState: MenuStates.Closed,\n    buttonRef: createRef(),\n    itemsRef: createRef(),\n    items: [],\n    searchQuery: '',\n    activeItemIndex: null\n  });\n  var _reducerBag$ = reducerBag[0],\n      menuState = _reducerBag$.menuState,\n      itemsRef = _reducerBag$.itemsRef,\n      buttonRef = _reducerBag$.buttonRef,\n      dispatch = reducerBag[1];\n  useEffect(function () {\n    function handler(event) {\n      var _buttonRef$current, _itemsRef$current;\n\n      if (menuState !== MenuStates.Open) return;\n      if ((_buttonRef$current = buttonRef.current) === null || _buttonRef$current === void 0 ? void 0 : _buttonRef$current.contains(event.target)) return;\n\n      if (!((_itemsRef$current = itemsRef.current) === null || _itemsRef$current === void 0 ? void 0 : _itemsRef$current.contains(event.target))) {\n        dispatch({\n          type: ActionTypes.CloseMenu\n        });\n      }\n\n      if (!event.defaultPrevented) d.nextFrame(function () {\n        var _buttonRef$current2;\n\n        return (_buttonRef$current2 = buttonRef.current) === null || _buttonRef$current2 === void 0 ? void 0 : _buttonRef$current2.focus();\n      });\n    }\n\n    window.addEventListener('click', handler);\n    return function () {\n      return window.removeEventListener('click', handler);\n    };\n  }, [menuState, itemsRef, buttonRef, d, dispatch]);\n  var propsBag = useMemo(function () {\n    return {\n      open: menuState === MenuStates.Open\n    };\n  }, [menuState]);\n  return createElement(MenuContext.Provider, {\n    value: reducerBag\n  }, render(props, propsBag, DEFAULT_MENU_TAG));\n}\n\nvar DEFAULT_BUTTON_TAG = 'button';\nvar Button = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _state$itemsRef$curre5;\n\n  var _useMenuContext = useMenuContext([Menu.name, Button.name].join('.')),\n      state = _useMenuContext[0],\n      dispatch = _useMenuContext[1];\n\n  var buttonRef = useSyncRefs(state.buttonRef, ref);\n\n  var _React$useState = useState(false),\n      focused = _React$useState[0],\n      setFocused = _React$useState[1];\n\n  var id = \"headlessui-menu-button-\" + useId();\n  var d = useDisposables();\n  var handleKeyDown = useCallback(function (event) {\n    switch (event.key) {\n      // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n      case Keys.Space:\n      case Keys.Enter:\n      case Keys.ArrowDown:\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes.OpenMenu\n        });\n        d.nextFrame(function () {\n          var _state$itemsRef$curre;\n\n          (_state$itemsRef$curre = state.itemsRef.current) === null || _state$itemsRef$curre === void 0 ? void 0 : _state$itemsRef$curre.focus();\n          dispatch({\n            type: ActionTypes.GoToItem,\n            focus: Focus.FirstItem\n          });\n        });\n        break;\n\n      case Keys.ArrowUp:\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes.OpenMenu\n        });\n        d.nextFrame(function () {\n          var _state$itemsRef$curre2;\n\n          (_state$itemsRef$curre2 = state.itemsRef.current) === null || _state$itemsRef$curre2 === void 0 ? void 0 : _state$itemsRef$curre2.focus();\n          dispatch({\n            type: ActionTypes.GoToItem,\n            focus: Focus.LastItem\n          });\n        });\n        break;\n    }\n  }, [dispatch, state, d]);\n  var handlePointerUp = useCallback(function (event) {\n    if (state.menuState === MenuStates.Open) {\n      dispatch({\n        type: ActionTypes.CloseMenu\n      });\n      d.nextFrame(function () {\n        var _state$buttonRef$curr;\n\n        return (_state$buttonRef$curr = state.buttonRef.current) === null || _state$buttonRef$curr === void 0 ? void 0 : _state$buttonRef$curr.focus();\n      });\n    } else {\n      event.preventDefault();\n      dispatch({\n        type: ActionTypes.OpenMenu\n      });\n      d.nextFrame(function () {\n        var _state$itemsRef$curre3;\n\n        return (_state$itemsRef$curre3 = state.itemsRef.current) === null || _state$itemsRef$curre3 === void 0 ? void 0 : _state$itemsRef$curre3.focus();\n      });\n    }\n  }, [dispatch, d, state]);\n  var handleFocus = useCallback(function () {\n    var _state$itemsRef$curre4;\n\n    if (state.menuState === MenuStates.Open) (_state$itemsRef$curre4 = state.itemsRef.current) === null || _state$itemsRef$curre4 === void 0 ? void 0 : _state$itemsRef$curre4.focus();\n    setFocused(true);\n  }, [state, setFocused]);\n  var handleBlur = useCallback(function () {\n    return setFocused(false);\n  }, [setFocused]);\n  var propsBag = useMemo(function () {\n    return {\n      open: state.menuState === MenuStates.Open,\n      focused: focused\n    };\n  }, [state, focused]);\n  var passthroughProps = props;\n  var propsWeControl = {\n    ref: buttonRef,\n    id: id,\n    type: 'button',\n    'aria-haspopup': true,\n    'aria-controls': (_state$itemsRef$curre5 = state.itemsRef.current) === null || _state$itemsRef$curre5 === void 0 ? void 0 : _state$itemsRef$curre5.id,\n    'aria-expanded': state.menuState === MenuStates.Open ? true : undefined,\n    onKeyDown: handleKeyDown,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onPointerUp: handlePointerUp\n  };\n  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_BUTTON_TAG);\n});\nvar DEFAULT_ITEMS_TAG = 'div';\nvar Items = /*#__PURE__*/forwardRefWithAs(function Items(props, ref) {\n  var _state$items$state$ac, _state$buttonRef$curr4;\n\n  var _props$static = props[\"static\"],\n      isStatic = _props$static === void 0 ? false : _props$static,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"static\"]);\n\n  var _useMenuContext2 = useMenuContext([Menu.name, Items.name].join('.')),\n      state = _useMenuContext2[0],\n      dispatch = _useMenuContext2[1];\n\n  var itemsRef = useSyncRefs(state.itemsRef, ref);\n  var id = \"headlessui-menu-items-\" + useId();\n  var searchDisposables = useDisposables();\n  var handleKeyDown = useCallback(function (event) {\n    searchDisposables.dispose();\n\n    switch (event.key) {\n      // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n      // @ts-expect-error Fallthrough is expected here\n      case Keys.Space:\n        if (state.searchQuery !== '') {\n          event.preventDefault();\n          return dispatch({\n            type: ActionTypes.Search,\n            value: event.key\n          });\n        }\n\n      // When in type ahead mode, fallthrough\n\n      case Keys.Enter:\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes.CloseMenu\n        });\n\n        if (state.activeItemIndex !== null) {\n          var _document$getElementB;\n\n          var _id = state.items[state.activeItemIndex].id;\n          (_document$getElementB = document.getElementById(_id)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.click();\n        }\n\n        disposables().nextFrame(function () {\n          var _state$buttonRef$curr2;\n\n          return (_state$buttonRef$curr2 = state.buttonRef.current) === null || _state$buttonRef$curr2 === void 0 ? void 0 : _state$buttonRef$curr2.focus();\n        });\n        break;\n\n      case Keys.ArrowDown:\n        event.preventDefault();\n        return dispatch({\n          type: ActionTypes.GoToItem,\n          focus: Focus.NextItem\n        });\n\n      case Keys.ArrowUp:\n        event.preventDefault();\n        return dispatch({\n          type: ActionTypes.GoToItem,\n          focus: Focus.PreviousItem\n        });\n\n      case Keys.Home:\n      case Keys.PageUp:\n        event.preventDefault();\n        return dispatch({\n          type: ActionTypes.GoToItem,\n          focus: Focus.FirstItem\n        });\n\n      case Keys.End:\n      case Keys.PageDown:\n        event.preventDefault();\n        return dispatch({\n          type: ActionTypes.GoToItem,\n          focus: Focus.LastItem\n        });\n\n      case Keys.Escape:\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes.CloseMenu\n        });\n        disposables().nextFrame(function () {\n          var _state$buttonRef$curr3;\n\n          return (_state$buttonRef$curr3 = state.buttonRef.current) === null || _state$buttonRef$curr3 === void 0 ? void 0 : _state$buttonRef$curr3.focus();\n        });\n        break;\n\n      case Keys.Tab:\n        return event.preventDefault();\n\n      default:\n        if (event.key.length === 1) {\n          dispatch({\n            type: ActionTypes.Search,\n            value: event.key\n          });\n          searchDisposables.setTimeout(function () {\n            return dispatch({\n              type: ActionTypes.ClearSearch\n            });\n          }, 350);\n        }\n\n        break;\n    }\n  }, [dispatch, searchDisposables, state]);\n  var propsBag = useMemo(function () {\n    return {\n      open: state.menuState === MenuStates.Open\n    };\n  }, [state]);\n  var propsWeControl = {\n    'aria-activedescendant': state.activeItemIndex === null ? undefined : (_state$items$state$ac = state.items[state.activeItemIndex]) === null || _state$items$state$ac === void 0 ? void 0 : _state$items$state$ac.id,\n    'aria-labelledby': (_state$buttonRef$curr4 = state.buttonRef.current) === null || _state$buttonRef$curr4 === void 0 ? void 0 : _state$buttonRef$curr4.id,\n    id: id,\n    onKeyDown: handleKeyDown,\n    role: 'menu',\n    tabIndex: 0\n  };\n  if (!isStatic && state.menuState === MenuStates.Closed) return null;\n  return render(_extends({}, passthroughProps, propsWeControl, {\n    ref: itemsRef\n  }), propsBag, DEFAULT_ITEMS_TAG);\n});\nvar DEFAULT_ITEM_TAG = Fragment;\n\nfunction Item(props) {\n  var _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      className = props.className,\n      onClick = props.onClick,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"disabled\", \"className\", \"onClick\"]);\n\n  var _useMenuContext3 = useMenuContext([Menu.name, Item.name].join('.')),\n      state = _useMenuContext3[0],\n      dispatch = _useMenuContext3[1];\n\n  var d = useDisposables();\n  var id = \"headlessui-menu-item-\" + useId();\n  var active = state.activeItemIndex !== null ? state.items[state.activeItemIndex].id === id : false;\n  var bag = useRef({\n    disabled: disabled\n  });\n  useIsoMorphicEffect(function () {\n    bag.current.disabled = disabled;\n  }, [bag, disabled]);\n  useIsoMorphicEffect(function () {\n    var _document$getElementB2, _document$getElementB3;\n\n    bag.current.textValue = (_document$getElementB2 = document.getElementById(id)) === null || _document$getElementB2 === void 0 ? void 0 : (_document$getElementB3 = _document$getElementB2.textContent) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.toLowerCase();\n  }, [bag, id]);\n  useIsoMorphicEffect(function () {\n    dispatch({\n      type: ActionTypes.RegisterItem,\n      id: id,\n      dataRef: bag\n    });\n    return function () {\n      return dispatch({\n        type: ActionTypes.UnregisterItem,\n        id: id\n      });\n    };\n  }, [bag, id]);\n  var handleClick = useCallback(function (event) {\n    if (disabled) return event.preventDefault();\n    dispatch({\n      type: ActionTypes.CloseMenu\n    });\n    d.nextFrame(function () {\n      var _state$buttonRef$curr5;\n\n      return (_state$buttonRef$curr5 = state.buttonRef.current) === null || _state$buttonRef$curr5 === void 0 ? void 0 : _state$buttonRef$curr5.focus();\n    });\n    if (onClick) return onClick(event);\n  }, [d, dispatch, state.buttonRef, disabled, onClick]);\n  var handleFocus = useCallback(function () {\n    if (disabled) return dispatch({\n      type: ActionTypes.GoToItem,\n      focus: Focus.Nothing\n    });\n    dispatch({\n      type: ActionTypes.GoToItem,\n      focus: Focus.SpecificItem,\n      id: id\n    });\n  }, [disabled, id, dispatch]);\n  var handlePointerMove = useCallback(function () {\n    if (disabled) return;\n    if (active) return;\n    dispatch({\n      type: ActionTypes.GoToItem,\n      focus: Focus.SpecificItem,\n      id: id\n    });\n  }, [disabled, active, id, dispatch]);\n  var handlePointerLeave = useCallback(function () {\n    if (disabled) return;\n    if (!active) return;\n    dispatch({\n      type: ActionTypes.GoToItem,\n      focus: Focus.Nothing\n    });\n  }, [disabled, active, dispatch]);\n  var propsBag = useMemo(function () {\n    return {\n      active: active,\n      disabled: disabled\n    };\n  }, [active, disabled]);\n  var propsWeControl = {\n    id: id,\n    role: 'menuitem',\n    tabIndex: -1,\n    className: resolvePropValue(className, propsBag),\n    'aria-disabled': disabled === true ? true : undefined,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handlePointerMove,\n    onPointerLeave: handlePointerLeave\n  };\n  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_ITEM_TAG);\n}\n\nfunction resolvePropValue(property, bag) {\n  if (property === undefined) return undefined;\n  if (typeof property === 'function') return property(bag);\n  return property;\n} // ---\n\n\nMenu.Button = Button;\nMenu.Items = Items;\nMenu.Item = Item;\n\nfunction useComputed(cb, dependencies) {\n  var _React$useState = useState(cb),\n      value = _React$useState[0],\n      setValue = _React$useState[1];\n\n  var cbRef = useRef(cb);\n  useIsoMorphicEffect(function () {\n    cbRef.current = cb;\n  }, [cb]);\n  useIsoMorphicEffect(function () {\n    return setValue(cbRef.current);\n  }, [cbRef, setValue].concat(dependencies));\n  return value;\n}\n\nvar _reducers$1;\n\nvar ListboxStates;\n\n(function (ListboxStates) {\n  ListboxStates[ListboxStates[\"Open\"] = 0] = \"Open\";\n  ListboxStates[ListboxStates[\"Closed\"] = 1] = \"Closed\";\n})(ListboxStates || (ListboxStates = {}));\n\nvar ActionTypes$1;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"OpenListbox\"] = 0] = \"OpenListbox\";\n  ActionTypes[ActionTypes[\"CloseListbox\"] = 1] = \"CloseListbox\";\n  ActionTypes[ActionTypes[\"GoToOption\"] = 2] = \"GoToOption\";\n  ActionTypes[ActionTypes[\"Search\"] = 3] = \"Search\";\n  ActionTypes[ActionTypes[\"ClearSearch\"] = 4] = \"ClearSearch\";\n  ActionTypes[ActionTypes[\"RegisterOption\"] = 5] = \"RegisterOption\";\n  ActionTypes[ActionTypes[\"UnregisterOption\"] = 6] = \"UnregisterOption\";\n})(ActionTypes$1 || (ActionTypes$1 = {}));\n\nvar Focus$1;\n\n(function (Focus) {\n  Focus[Focus[\"First\"] = 0] = \"First\";\n  Focus[Focus[\"Previous\"] = 1] = \"Previous\";\n  Focus[Focus[\"Next\"] = 2] = \"Next\";\n  Focus[Focus[\"Last\"] = 3] = \"Last\";\n  Focus[Focus[\"Specific\"] = 4] = \"Specific\";\n  Focus[Focus[\"Nothing\"] = 5] = \"Nothing\";\n})(Focus$1 || (Focus$1 = {}));\n\nfunction calculateActiveOptionIndex(state, focus, id) {\n  var _state$activeOptionIn, _match;\n\n  if (state.options.length <= 0) return null;\n  var options = state.options;\n  var activeOptionIndex = (_state$activeOptionIn = state.activeOptionIndex) !== null && _state$activeOptionIn !== void 0 ? _state$activeOptionIn : -1;\n  var nextActiveIndex = match(focus, (_match = {}, _match[Focus$1.First] = function () {\n    return options.findIndex(function (option) {\n      return !option.dataRef.current.disabled;\n    });\n  }, _match[Focus$1.Previous] = function () {\n    var idx = options.slice().reverse().findIndex(function (option, idx, all) {\n      if (activeOptionIndex !== -1 && all.length - idx - 1 >= activeOptionIndex) return false;\n      return !option.dataRef.current.disabled;\n    });\n    if (idx === -1) return idx;\n    return options.length - 1 - idx;\n  }, _match[Focus$1.Next] = function () {\n    return options.findIndex(function (option, idx) {\n      if (idx <= activeOptionIndex) return false;\n      return !option.dataRef.current.disabled;\n    });\n  }, _match[Focus$1.Last] = function () {\n    var idx = options.slice().reverse().findIndex(function (option) {\n      return !option.dataRef.current.disabled;\n    });\n    if (idx === -1) return idx;\n    return options.length - 1 - idx;\n  }, _match[Focus$1.Specific] = function () {\n    return options.findIndex(function (option) {\n      return option.id === id;\n    });\n  }, _match[Focus$1.Nothing] = function () {\n    return null;\n  }, _match));\n  if (nextActiveIndex === -1) return state.activeOptionIndex;\n  return nextActiveIndex;\n}\n\nvar reducers$1 = (_reducers$1 = {}, _reducers$1[ActionTypes$1.CloseListbox] = function (state) {\n  return _extends({}, state, {\n    listboxState: ListboxStates.Closed\n  });\n}, _reducers$1[ActionTypes$1.OpenListbox] = function (state) {\n  return _extends({}, state, {\n    listboxState: ListboxStates.Open\n  });\n}, _reducers$1[ActionTypes$1.GoToOption] = function (state, action) {\n  var activeOptionIndex = calculateActiveOptionIndex(state, action.focus, action.id);\n\n  if (state.searchQuery === '' && state.activeOptionIndex === activeOptionIndex) {\n    return state;\n  }\n\n  return _extends({}, state, {\n    searchQuery: '',\n    activeOptionIndex: activeOptionIndex\n  });\n}, _reducers$1[ActionTypes$1.Search] = function (state, action) {\n  var searchQuery = state.searchQuery + action.value;\n  var match = state.options.findIndex(function (option) {\n    var _option$dataRef$curre;\n\n    return !option.dataRef.current.disabled && ((_option$dataRef$curre = option.dataRef.current.textValue) === null || _option$dataRef$curre === void 0 ? void 0 : _option$dataRef$curre.startsWith(searchQuery));\n  });\n\n  if (match === -1 || match === state.activeOptionIndex) {\n    return _extends({}, state, {\n      searchQuery: searchQuery\n    });\n  }\n\n  return _extends({}, state, {\n    searchQuery: searchQuery,\n    activeOptionIndex: match\n  });\n}, _reducers$1[ActionTypes$1.ClearSearch] = function (state) {\n  return _extends({}, state, {\n    searchQuery: ''\n  });\n}, _reducers$1[ActionTypes$1.RegisterOption] = function (state, action) {\n  return _extends({}, state, {\n    options: [].concat(state.options, [{\n      id: action.id,\n      dataRef: action.dataRef\n    }])\n  });\n}, _reducers$1[ActionTypes$1.UnregisterOption] = function (state, action) {\n  var nextOptions = state.options.slice();\n  var currentActiveOption = state.activeOptionIndex !== null ? nextOptions[state.activeOptionIndex] : null;\n  var idx = nextOptions.findIndex(function (a) {\n    return a.id === action.id;\n  });\n  if (idx !== -1) nextOptions.splice(idx, 1);\n  return _extends({}, state, {\n    options: nextOptions,\n    activeOptionIndex: function () {\n      if (idx === state.activeOptionIndex) return null;\n      if (currentActiveOption === null) return null; // If we removed the option before the actual active index, then it would be out of sync. To\n      // fix this, we will find the correct (new) index position.\n\n      return nextOptions.indexOf(currentActiveOption);\n    }()\n  });\n}, _reducers$1);\nvar ListboxContext = /*#__PURE__*/createContext(null);\n\nfunction stateReducer$1(state, action) {\n  return match(action.type, reducers$1, state, action);\n}\n\nfunction useListboxContext(component) {\n  var context = useContext(ListboxContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Listbox.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useListboxContext);\n    throw err;\n  }\n\n  return context;\n} // ---\n\n\nvar DEFAULT_LISTBOX_TAG = Fragment;\n\nfunction Listbox(props) {\n  var value = props.value,\n      onChange = props.onChange,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"value\", \"onChange\"]);\n\n  var d = useDisposables();\n  var reducerBag = useReducer(stateReducer$1, {\n    listboxState: ListboxStates.Closed,\n    propsRef: {\n      current: {\n        value: value,\n        onChange: onChange\n      }\n    },\n    labelRef: createRef(),\n    buttonRef: createRef(),\n    optionsRef: createRef(),\n    options: [],\n    searchQuery: '',\n    activeOptionIndex: null\n  });\n  var _reducerBag$ = reducerBag[0],\n      listboxState = _reducerBag$.listboxState,\n      propsRef = _reducerBag$.propsRef,\n      optionsRef = _reducerBag$.optionsRef,\n      buttonRef = _reducerBag$.buttonRef,\n      dispatch = reducerBag[1];\n  useIsoMorphicEffect(function () {\n    propsRef.current.value = value;\n  }, [value, propsRef]);\n  useIsoMorphicEffect(function () {\n    propsRef.current.onChange = onChange;\n  }, [onChange, propsRef]);\n  useEffect(function () {\n    function handler(event) {\n      var _buttonRef$current, _optionsRef$current;\n\n      if (listboxState !== ListboxStates.Open) return;\n      if ((_buttonRef$current = buttonRef.current) === null || _buttonRef$current === void 0 ? void 0 : _buttonRef$current.contains(event.target)) return;\n\n      if (!((_optionsRef$current = optionsRef.current) === null || _optionsRef$current === void 0 ? void 0 : _optionsRef$current.contains(event.target))) {\n        dispatch({\n          type: ActionTypes$1.CloseListbox\n        });\n      }\n\n      if (!event.defaultPrevented) d.nextFrame(function () {\n        var _buttonRef$current2;\n\n        return (_buttonRef$current2 = buttonRef.current) === null || _buttonRef$current2 === void 0 ? void 0 : _buttonRef$current2.focus();\n      });\n    }\n\n    window.addEventListener('click', handler);\n    return function () {\n      return window.removeEventListener('click', handler);\n    };\n  }, [listboxState, optionsRef, buttonRef, d, dispatch]);\n  var propsBag = useMemo(function () {\n    return {\n      open: listboxState === ListboxStates.Open\n    };\n  }, [listboxState]);\n  return createElement(ListboxContext.Provider, {\n    value: reducerBag\n  }, render(passThroughProps, propsBag, DEFAULT_LISTBOX_TAG));\n}\n\nvar DEFAULT_BUTTON_TAG$1 = 'button';\nvar Button$1 = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _state$optionsRef$cur5;\n\n  var _useListboxContext = useListboxContext([Listbox.name, Button.name].join('.')),\n      state = _useListboxContext[0],\n      dispatch = _useListboxContext[1];\n\n  var buttonRef = useSyncRefs(state.buttonRef, ref);\n\n  var _React$useState = useState(false),\n      focused = _React$useState[0],\n      setFocused = _React$useState[1];\n\n  var id = \"headlessui-listbox-button-\" + useId();\n  var d = useDisposables();\n  var handleKeyDown = useCallback(function (event) {\n    switch (event.key) {\n      // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n      case Keys.Space:\n      case Keys.Enter:\n      case Keys.ArrowDown:\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes$1.OpenListbox\n        });\n        d.nextFrame(function () {\n          var _state$optionsRef$cur;\n\n          (_state$optionsRef$cur = state.optionsRef.current) === null || _state$optionsRef$cur === void 0 ? void 0 : _state$optionsRef$cur.focus();\n          if (!state.propsRef.current.value) dispatch({\n            type: ActionTypes$1.GoToOption,\n            focus: Focus$1.First\n          });\n        });\n        break;\n\n      case Keys.ArrowUp:\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes$1.OpenListbox\n        });\n        d.nextFrame(function () {\n          var _state$optionsRef$cur2;\n\n          (_state$optionsRef$cur2 = state.optionsRef.current) === null || _state$optionsRef$cur2 === void 0 ? void 0 : _state$optionsRef$cur2.focus();\n          if (!state.propsRef.current.value) dispatch({\n            type: ActionTypes$1.GoToOption,\n            focus: Focus$1.Last\n          });\n        });\n        break;\n    }\n  }, [dispatch, state, d]);\n  var handlePointerUp = useCallback(function (event) {\n    if (state.listboxState === ListboxStates.Open) {\n      dispatch({\n        type: ActionTypes$1.CloseListbox\n      });\n      d.nextFrame(function () {\n        var _state$buttonRef$curr;\n\n        return (_state$buttonRef$curr = state.buttonRef.current) === null || _state$buttonRef$curr === void 0 ? void 0 : _state$buttonRef$curr.focus();\n      });\n    } else {\n      event.preventDefault();\n      dispatch({\n        type: ActionTypes$1.OpenListbox\n      });\n      d.nextFrame(function () {\n        var _state$optionsRef$cur3;\n\n        return (_state$optionsRef$cur3 = state.optionsRef.current) === null || _state$optionsRef$cur3 === void 0 ? void 0 : _state$optionsRef$cur3.focus();\n      });\n    }\n  }, [dispatch, d, state]);\n  var handleFocus = useCallback(function () {\n    var _state$optionsRef$cur4;\n\n    if (state.listboxState === ListboxStates.Open) return (_state$optionsRef$cur4 = state.optionsRef.current) === null || _state$optionsRef$cur4 === void 0 ? void 0 : _state$optionsRef$cur4.focus();\n    setFocused(true);\n  }, [state, setFocused]);\n  var handleBlur = useCallback(function () {\n    return setFocused(false);\n  }, [setFocused]);\n  var labelledby = useComputed(function () {\n    if (!state.labelRef.current) return undefined;\n    return [state.labelRef.current.id, id].join(' ');\n  }, [state.labelRef.current, id]);\n  var propsBag = useMemo(function () {\n    return {\n      open: state.listboxState === ListboxStates.Open,\n      focused: focused\n    };\n  }, [state, focused]);\n  var passthroughProps = props;\n  var propsWeControl = {\n    ref: buttonRef,\n    id: id,\n    type: 'button',\n    'aria-haspopup': true,\n    'aria-controls': (_state$optionsRef$cur5 = state.optionsRef.current) === null || _state$optionsRef$cur5 === void 0 ? void 0 : _state$optionsRef$cur5.id,\n    'aria-expanded': state.listboxState === ListboxStates.Open ? true : undefined,\n    'aria-labelledby': labelledby,\n    onKeyDown: handleKeyDown,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onPointerUp: handlePointerUp\n  };\n  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_BUTTON_TAG$1);\n});\nvar DEFAULT_LABEL_TAG = 'label';\n\nfunction Label(props) {\n  var _useListboxContext2 = useListboxContext([Listbox.name, Label.name].join('.')),\n      state = _useListboxContext2[0];\n\n  var id = \"headlessui-listbox-label-\" + useId();\n  var handlePointerUp = useCallback(function () {\n    var _state$buttonRef$curr2;\n\n    return (_state$buttonRef$curr2 = state.buttonRef.current) === null || _state$buttonRef$curr2 === void 0 ? void 0 : _state$buttonRef$curr2.focus();\n  }, [state.buttonRef]);\n  var propsBag = useMemo(function () {\n    return {\n      open: state.listboxState === ListboxStates.Open\n    };\n  }, [state]);\n  var propsWeControl = {\n    ref: state.labelRef,\n    id: id,\n    onPointerUp: handlePointerUp\n  };\n  return render(_extends({}, props, propsWeControl), propsBag, DEFAULT_LABEL_TAG);\n}\n\nvar DEFAULT_OPTIONS_TAG = 'ul';\nvar Options = /*#__PURE__*/forwardRefWithAs(function Options(props, ref) {\n  var _state$options$state$;\n\n  var _props$static = props[\"static\"],\n      isStatic = _props$static === void 0 ? false : _props$static,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"enter\", \"enterFrom\", \"enterTo\", \"leave\", \"leaveFrom\", \"leaveTo\", \"static\"]);\n\n  var _useListboxContext3 = useListboxContext([Listbox.name, Options.name].join('.')),\n      state = _useListboxContext3[0],\n      dispatch = _useListboxContext3[1];\n\n  var optionsRef = useSyncRefs(state.optionsRef, ref);\n  var id = \"headlessui-listbox-options-\" + useId();\n  var d = useDisposables();\n  var searchDisposables = useDisposables();\n  var handleKeyDown = useCallback(function (event) {\n    searchDisposables.dispose();\n\n    switch (event.key) {\n      // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n      // @ts-expect-error Fallthrough is expected here\n      case Keys.Space:\n        if (state.searchQuery !== '') {\n          event.preventDefault();\n          return dispatch({\n            type: ActionTypes$1.Search,\n            value: event.key\n          });\n        }\n\n      // When in type ahead mode, fallthrough\n\n      case Keys.Enter:\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes$1.CloseListbox\n        });\n\n        if (state.activeOptionIndex !== null) {\n          var dataRef = state.options[state.activeOptionIndex].dataRef;\n          state.propsRef.current.onChange(dataRef.current.value);\n        }\n\n        disposables().nextFrame(function () {\n          var _state$buttonRef$curr3;\n\n          return (_state$buttonRef$curr3 = state.buttonRef.current) === null || _state$buttonRef$curr3 === void 0 ? void 0 : _state$buttonRef$curr3.focus();\n        });\n        break;\n\n      case Keys.ArrowDown:\n        event.preventDefault();\n        return dispatch({\n          type: ActionTypes$1.GoToOption,\n          focus: Focus$1.Next\n        });\n\n      case Keys.ArrowUp:\n        event.preventDefault();\n        return dispatch({\n          type: ActionTypes$1.GoToOption,\n          focus: Focus$1.Previous\n        });\n\n      case Keys.Home:\n      case Keys.PageUp:\n        event.preventDefault();\n        return dispatch({\n          type: ActionTypes$1.GoToOption,\n          focus: Focus$1.First\n        });\n\n      case Keys.End:\n      case Keys.PageDown:\n        event.preventDefault();\n        return dispatch({\n          type: ActionTypes$1.GoToOption,\n          focus: Focus$1.Last\n        });\n\n      case Keys.Escape:\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes$1.CloseListbox\n        });\n        return d.nextFrame(function () {\n          var _state$buttonRef$curr4;\n\n          return (_state$buttonRef$curr4 = state.buttonRef.current) === null || _state$buttonRef$curr4 === void 0 ? void 0 : _state$buttonRef$curr4.focus();\n        });\n\n      case Keys.Tab:\n        return event.preventDefault();\n\n      default:\n        if (event.key.length === 1) {\n          dispatch({\n            type: ActionTypes$1.Search,\n            value: event.key\n          });\n          searchDisposables.setTimeout(function () {\n            return dispatch({\n              type: ActionTypes$1.ClearSearch\n            });\n          }, 350);\n        }\n\n        break;\n    }\n  }, [d, dispatch, searchDisposables, state]);\n  var labelledby = useComputed(function () {\n    var _state$labelRef$curre, _state$labelRef$curre2, _state$buttonRef$curr5;\n\n    return (_state$labelRef$curre = (_state$labelRef$curre2 = state.labelRef.current) === null || _state$labelRef$curre2 === void 0 ? void 0 : _state$labelRef$curre2.id) !== null && _state$labelRef$curre !== void 0 ? _state$labelRef$curre : (_state$buttonRef$curr5 = state.buttonRef.current) === null || _state$buttonRef$curr5 === void 0 ? void 0 : _state$buttonRef$curr5.id;\n  }, [state.labelRef.current, state.buttonRef.current]);\n  var propsBag = useMemo(function () {\n    return {\n      open: state.listboxState === ListboxStates.Open\n    };\n  }, [state]);\n  var propsWeControl = {\n    'aria-activedescendant': state.activeOptionIndex === null ? undefined : (_state$options$state$ = state.options[state.activeOptionIndex]) === null || _state$options$state$ === void 0 ? void 0 : _state$options$state$.id,\n    'aria-labelledby': labelledby,\n    id: id,\n    onKeyDown: handleKeyDown,\n    role: 'listbox',\n    tabIndex: 0\n  };\n  if (!isStatic && state.listboxState === ListboxStates.Closed) return null;\n  return render(_extends({}, passthroughProps, propsWeControl, {\n    ref: optionsRef\n  }), propsBag, DEFAULT_OPTIONS_TAG);\n});\nvar DEFAULT_OPTION_TAG = 'li';\n\nfunction Option(props) {\n  var _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      value = props.value,\n      className = props.className,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"disabled\", \"value\", \"className\"]);\n\n  var _useListboxContext4 = useListboxContext([Listbox.name, Option.name].join('.')),\n      state = _useListboxContext4[0],\n      dispatch = _useListboxContext4[1];\n\n  var id = \"headlessui-listbox-option-\" + useId();\n  var active = state.activeOptionIndex !== null ? state.options[state.activeOptionIndex].id === id : false;\n  var selected = state.propsRef.current.value === value;\n  var bag = useRef({\n    disabled: disabled,\n    value: value\n  });\n  useIsoMorphicEffect(function () {\n    bag.current.disabled = disabled;\n  }, [bag, disabled]);\n  useIsoMorphicEffect(function () {\n    bag.current.value = value;\n  }, [bag, value]);\n  useIsoMorphicEffect(function () {\n    var _document$getElementB, _document$getElementB2;\n\n    bag.current.textValue = (_document$getElementB = document.getElementById(id)) === null || _document$getElementB === void 0 ? void 0 : (_document$getElementB2 = _document$getElementB.textContent) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.toLowerCase();\n  }, [bag, id]);\n  var select = useCallback(function () {\n    return state.propsRef.current.onChange(value);\n  }, [state.propsRef, value]);\n  useIsoMorphicEffect(function () {\n    dispatch({\n      type: ActionTypes$1.RegisterOption,\n      id: id,\n      dataRef: bag\n    });\n    return function () {\n      return dispatch({\n        type: ActionTypes$1.UnregisterOption,\n        id: id\n      });\n    };\n  }, [bag, id]);\n  useIsoMorphicEffect(function () {\n    var _document$getElementB3, _document$getElementB4;\n\n    if (!selected) return;\n    dispatch({\n      type: ActionTypes$1.GoToOption,\n      focus: Focus$1.Specific,\n      id: id\n    });\n    (_document$getElementB3 = document.getElementById(id)) === null || _document$getElementB3 === void 0 ? void 0 : (_document$getElementB4 = _document$getElementB3.focus) === null || _document$getElementB4 === void 0 ? void 0 : _document$getElementB4.call(_document$getElementB3);\n  }, []);\n  useIsoMorphicEffect(function () {\n    if (!active) return;\n    var d = disposables();\n    d.nextFrame(function () {\n      var _document$getElementB5, _document$getElementB6;\n\n      return (_document$getElementB5 = document.getElementById(id)) === null || _document$getElementB5 === void 0 ? void 0 : (_document$getElementB6 = _document$getElementB5.scrollIntoView) === null || _document$getElementB6 === void 0 ? void 0 : _document$getElementB6.call(_document$getElementB5, {\n        block: 'nearest'\n      });\n    });\n    return d.dispose;\n  }, [active]);\n  var handleClick = useCallback(function (event) {\n    if (disabled) return event.preventDefault();\n    select();\n    dispatch({\n      type: ActionTypes$1.CloseListbox\n    });\n    disposables().nextFrame(function () {\n      var _state$buttonRef$curr6;\n\n      return (_state$buttonRef$curr6 = state.buttonRef.current) === null || _state$buttonRef$curr6 === void 0 ? void 0 : _state$buttonRef$curr6.focus();\n    });\n  }, [dispatch, state.buttonRef, disabled, select]);\n  var handleFocus = useCallback(function () {\n    if (disabled) return dispatch({\n      type: ActionTypes$1.GoToOption,\n      focus: Focus$1.Nothing\n    });\n    dispatch({\n      type: ActionTypes$1.GoToOption,\n      focus: Focus$1.Specific,\n      id: id\n    });\n  }, [disabled, id, dispatch]);\n  var handlePointerMove = useCallback(function () {\n    if (disabled) return;\n    if (active) return;\n    dispatch({\n      type: ActionTypes$1.GoToOption,\n      focus: Focus$1.Specific,\n      id: id\n    });\n  }, [disabled, active, id, dispatch]);\n  var handlePointerLeave = useCallback(function () {\n    if (disabled) return;\n    if (!active) return;\n    dispatch({\n      type: ActionTypes$1.GoToOption,\n      focus: Focus$1.Nothing\n    });\n  }, [disabled, active, dispatch]);\n  var propsBag = useMemo(function () {\n    return {\n      active: active,\n      selected: selected,\n      disabled: disabled\n    };\n  }, [active, selected, disabled]);\n  var propsWeControl = {\n    id: id,\n    role: 'option',\n    tabIndex: -1,\n    className: resolvePropValue$1(className, propsBag),\n    'aria-disabled': disabled === true ? true : undefined,\n    'aria-selected': selected === true ? true : undefined,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handlePointerMove,\n    onPointerLeave: handlePointerLeave\n  };\n  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_OPTION_TAG);\n}\n\nfunction resolvePropValue$1(property, bag) {\n  if (property === undefined) return undefined;\n  if (typeof property === 'function') return property(bag);\n  return property;\n} // ---\n\n\nListbox.Button = Button$1;\nListbox.Label = Label;\nListbox.Options = Options;\nListbox.Option = Option;\nvar GroupContext = /*#__PURE__*/createContext(null);\n\nfunction useGroupContext(component) {\n  var context = useContext(GroupContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <Switch.Group /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useGroupContext);\n    throw err;\n  }\n\n  return context;\n} // ---\n\n\nvar DEFAULT_GROUP_TAG = Fragment;\n\nfunction Group(props) {\n  var _React$useState = useState(null),\n      switchElement = _React$useState[0],\n      setSwitchElement = _React$useState[1];\n\n  var _React$useState2 = useState(null),\n      labelElement = _React$useState2[0],\n      setLabelElement = _React$useState2[1];\n\n  var context = useMemo(function () {\n    return {\n      \"switch\": switchElement,\n      label: labelElement,\n      setSwitch: setSwitchElement,\n      setLabel: setLabelElement\n    };\n  }, [switchElement, setSwitchElement, labelElement, setLabelElement]);\n  return createElement(GroupContext.Provider, {\n    value: context\n  }, render(props, {}, DEFAULT_GROUP_TAG));\n} // ---\n\n\nvar DEFAULT_SWITCH_TAG = 'button';\n\nfunction Switch(props) {\n  var _groupContext$label;\n\n  var checked = props.checked,\n      onChange = props.onChange,\n      className = props.className,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"checked\", \"onChange\", \"className\"]);\n\n  var id = \"headlessui-switch-\" + useId();\n  var groupContext = useContext(GroupContext);\n  var toggle = useCallback(function () {\n    return onChange(!checked);\n  }, [onChange, checked]);\n  var handleClick = useCallback(function (event) {\n    event.preventDefault();\n    toggle();\n  }, [toggle]);\n  var handleKeyUp = useCallback(function (event) {\n    if (event.key === Keys.Space) {\n      event.preventDefault();\n      toggle();\n    }\n  }, [toggle]);\n  var propsBag = useMemo(function () {\n    return {\n      checked: checked\n    };\n  }, [checked]);\n  var propsWeControl = {\n    id: id,\n    ref: groupContext === null ? undefined : groupContext.setSwitch,\n    role: 'switch',\n    tabIndex: 0,\n    className: resolvePropValue$2(className, propsBag),\n    'aria-checked': checked,\n    'aria-labelledby': groupContext === null || groupContext === void 0 ? void 0 : (_groupContext$label = groupContext.label) === null || _groupContext$label === void 0 ? void 0 : _groupContext$label.id,\n    onClick: handleClick,\n    onKeyUp: handleKeyUp\n  };\n  return render(_extends({}, passThroughProps, propsWeControl), propsBag, DEFAULT_SWITCH_TAG);\n}\n\nvar DEFAULT_LABEL_TAG$1 = 'label';\n\nfunction Label$1(props) {\n  var state = useGroupContext([Switch.name, Label$1.name].join('.'));\n  var id = \"headlessui-switch-label-\" + useId();\n  var handlePointerUp = useCallback(function () {\n    if (!state[\"switch\"]) return;\n    state[\"switch\"].click();\n    state[\"switch\"].focus();\n  }, [state[\"switch\"]]);\n  var propsWeControl = {\n    ref: state.setLabel,\n    id: id,\n    onPointerUp: handlePointerUp\n  };\n  return render(_extends({}, props, propsWeControl), {}, DEFAULT_LABEL_TAG$1);\n} // ---\n\n\nSwitch.Group = Group;\nSwitch.Label = Label$1; // ---\n\nfunction resolvePropValue$2(property, bag) {\n  if (property === undefined) return undefined;\n  if (typeof property === 'function') return property(bag);\n  return property;\n}\n\nexport { Listbox, Menu, Switch, Transition };","map":null,"metadata":{},"sourceType":"module"}