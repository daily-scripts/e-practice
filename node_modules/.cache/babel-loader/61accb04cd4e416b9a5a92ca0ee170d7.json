{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport cet4 from 'assets/CET4_T.json';\nimport { useSelectedChapter, useSelectedDictionary } from 'store/AppState';\nimport useSWR from 'swr';\nconst numWordsPerChapter = 20;\n\n/**\n * Use word lists from the current selected dictionary.\n * When the data is loading, this returns `undefined`.\n */\nexport function useWordList() {\n  _s();\n\n  const selectedDictionary = useSelectedDictionary();\n  const [currentChapter, setCurrentChapter] = useSelectedChapter();\n  const {\n    data: wordList\n  } = useSWR([selectedDictionary.id, selectedDictionary.url], fetchWordList);\n  return wordList === undefined ? undefined : {\n    dictName: selectedDictionary.name,\n    chapter: currentChapter,\n    chapterListLength: wordList.totalChapters,\n    words: wordList.words.slice(currentChapter * numWordsPerChapter, (currentChapter + 1) * numWordsPerChapter),\n    setChapterNumber: setCurrentChapter\n  };\n}\n\n_s(useWordList, \"bN6lhgZVO4MScL7EuDC+L2tDy8E=\", false, function () {\n  return [useSelectedDictionary, useSelectedChapter, useSWR];\n});\n\nasync function fetchWordList(id, url) {\n  if (id === 'cet4') {\n    return {\n      words: cet4,\n      totalChapters: Math.ceil(cet4.length / numWordsPerChapter)\n    };\n  } else {\n    const response = await fetch(url);\n    const words = await response.json();\n    return {\n      words,\n      totalChapters: Math.ceil(words.length / numWordsPerChapter)\n    };\n  }\n}","map":{"version":3,"sources":["/Users/xuel/workspace/GitHub/programmer-english/src/pages/Typing/hooks/useWordList.ts"],"names":["cet4","useSelectedChapter","useSelectedDictionary","useSWR","numWordsPerChapter","useWordList","selectedDictionary","currentChapter","setCurrentChapter","data","wordList","id","url","fetchWordList","undefined","dictName","name","chapter","chapterListLength","totalChapters","words","slice","setChapterNumber","Math","ceil","length","response","fetch","json"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,gBAA1D;AACA,OAAOC,MAAP,MAAmB,KAAnB;AASA,MAAMC,kBAAkB,GAAG,EAA3B;;AAUA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAT,GAAsD;AAAA;;AAC3D,QAAMC,kBAAkB,GAAGJ,qBAAqB,EAAhD;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCP,kBAAkB,EAA9D;AACA,QAAM;AAAEQ,IAAAA,IAAI,EAAEC;AAAR,MAAqBP,MAAM,CAAC,CAACG,kBAAkB,CAACK,EAApB,EAAwBL,kBAAkB,CAACM,GAA3C,CAAD,EAAkDC,aAAlD,CAAjC;AACA,SAAOH,QAAQ,KAAKI,SAAb,GACHA,SADG,GAEH;AACEC,IAAAA,QAAQ,EAAET,kBAAkB,CAACU,IAD/B;AAEEC,IAAAA,OAAO,EAAEV,cAFX;AAGEW,IAAAA,iBAAiB,EAAER,QAAQ,CAACS,aAH9B;AAIEC,IAAAA,KAAK,EAAEV,QAAQ,CAACU,KAAT,CAAeC,KAAf,CAAqBd,cAAc,GAAGH,kBAAtC,EAA0D,CAACG,cAAc,GAAG,CAAlB,IAAuBH,kBAAjF,CAJT;AAKEkB,IAAAA,gBAAgB,EAAEd;AALpB,GAFJ;AASD;;GAbeH,W;UACaH,qB,EACiBD,kB,EACjBE,M;;;AAiB7B,eAAeU,aAAf,CAA6BF,EAA7B,EAAyCC,GAAzC,EAAyE;AACvE,MAAID,EAAE,KAAK,MAAX,EAAmB;AACjB,WAAO;AAAES,MAAAA,KAAK,EAAEpB,IAAT;AAAemB,MAAAA,aAAa,EAAEI,IAAI,CAACC,IAAL,CAAUxB,IAAI,CAACyB,MAAL,GAAcrB,kBAAxB;AAA9B,KAAP;AACD,GAFD,MAEO;AACL,UAAMsB,QAAQ,GAAG,MAAMC,KAAK,CAACf,GAAD,CAA5B;AACA,UAAMQ,KAAa,GAAG,MAAMM,QAAQ,CAACE,IAAT,EAA5B;AACA,WAAO;AAAER,MAAAA,KAAF;AAASD,MAAAA,aAAa,EAAEI,IAAI,CAACC,IAAL,CAAUJ,KAAK,CAACK,MAAN,GAAerB,kBAAzB;AAAxB,KAAP;AACD;AACF","sourcesContent":["import cet4 from 'assets/CET4_T.json'\nimport { useSelectedChapter, useSelectedDictionary } from 'store/AppState'\nimport useSWR from 'swr'\n\nexport type Word = {\n  name: string\n  trans: string[]\n  usphone: string\n  ukphone: string\n}\n\nconst numWordsPerChapter = 20\n\nexport type UseWordListResult = {\n  dictName: string\n  chapter: number\n  chapterListLength: number\n  words: Word[]\n  setChapterNumber: (index: number) => void\n}\n\n/**\n * Use word lists from the current selected dictionary.\n * When the data is loading, this returns `undefined`.\n */\nexport function useWordList(): UseWordListResult | undefined {\n  const selectedDictionary = useSelectedDictionary()\n  const [currentChapter, setCurrentChapter] = useSelectedChapter()\n  const { data: wordList } = useSWR([selectedDictionary.id, selectedDictionary.url], fetchWordList)\n  return wordList === undefined\n    ? undefined\n    : {\n        dictName: selectedDictionary.name,\n        chapter: currentChapter,\n        chapterListLength: wordList.totalChapters,\n        words: wordList.words.slice(currentChapter * numWordsPerChapter, (currentChapter + 1) * numWordsPerChapter),\n        setChapterNumber: setCurrentChapter,\n      }\n}\n\ntype WordList = {\n  words: Word[]\n  totalChapters: number\n}\n\nasync function fetchWordList(id: string, url: string): Promise<WordList> {\n  if (id === 'cet4') {\n    return { words: cet4, totalChapters: Math.ceil(cet4.length / numWordsPerChapter) }\n  } else {\n    const response = await fetch(url)\n    const words: Word[] = await response.json()\n    return { words, totalChapters: Math.ceil(words.length / numWordsPerChapter) }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}