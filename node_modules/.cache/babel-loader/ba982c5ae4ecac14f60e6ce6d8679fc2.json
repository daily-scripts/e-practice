{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/xuel/workspace/GitHub/programmer-english/src/components/WordSound/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { SoundIcon } from 'components/SoundIcon';\nimport Tooltip from 'components/Tooltip';\nimport usePronunciationSound from 'hooks/usePronunciation';\nimport React, { useEffect, useCallback } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nconst WordSound = /*#__PURE__*/React.memo(_c = _s(({\n  word,\n  className,\n  inputWord,\n  ...rest\n}) => {\n  _s();\n\n  const {\n    play,\n    stop,\n    isPlaying\n  } = usePronunciationSound(word);\n  useHotkeys('ctrl+j', e => {\n    e.preventDefault();\n    stop();\n    play();\n  }, [play, stop]);\n  useEffect(() => {\n    if (inputWord.length === 0) {\n      stop();\n      play();\n    }\n  }, [play, inputWord, stop]);\n  useEffect(() => {\n    return stop;\n  }, [word, stop]);\n  const handleClickSoundIcon = useCallback(() => {\n    stop();\n    play();\n  }, [play, stop]);\n  return /*#__PURE__*/_jsxDEV(Tooltip, {\n    content: \"\\u6717\\u8BFB\\u53D1\\u97F3\\uFF08Ctrl + J\\uFF09\",\n    className: className,\n    children: /*#__PURE__*/_jsxDEV(SoundIcon, {\n      animated: isPlaying,\n      ...rest,\n      onClick: handleClickSoundIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}, \"Oy7v4VTYFzRbYCmsGQnZvFVglSY=\", false, function () {\n  return [usePronunciationSound, useHotkeys];\n}));\n_c2 = WordSound;\nexport default WordSound;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WordSound$React.memo\");\n$RefreshReg$(_c2, \"WordSound\");","map":{"version":3,"sources":["/Users/xuel/workspace/GitHub/programmer-english/src/components/WordSound/index.tsx"],"names":["SoundIcon","Tooltip","usePronunciationSound","React","useEffect","useCallback","useHotkeys","WordSound","memo","word","className","inputWord","rest","play","stop","isPlaying","e","preventDefault","length","handleClickSoundIcon"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0C,sBAA1C;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,qBAAP,MAAkC,wBAAlC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAMC,SAAmC,gBAAGJ,KAAK,CAACK,IAAN,SAAW,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAR;AAAmBC,EAAAA,SAAnB;AAA8B,KAAGC;AAAjC,CAAD,KAA6C;AAAA;;AAClG,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA;AAAd,MAA4Bb,qBAAqB,CAACO,IAAD,CAAvD;AAEAH,EAAAA,UAAU,CACR,QADQ,EAEPU,CAAD,IAAO;AACLA,IAAAA,CAAC,CAACC,cAAF;AACAH,IAAAA,IAAI;AACJD,IAAAA,IAAI;AACL,GANO,EAOR,CAACA,IAAD,EAAOC,IAAP,CAPQ,CAAV;AAUAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,SAAS,CAACO,MAAV,KAAqB,CAAzB,EAA4B;AAC1BJ,MAAAA,IAAI;AACJD,MAAAA,IAAI;AACL;AACF,GALQ,EAKN,CAACA,IAAD,EAAOF,SAAP,EAAkBG,IAAlB,CALM,CAAT;AAOAV,EAAAA,SAAS,CAAC,MAAM;AACd,WAAOU,IAAP;AACD,GAFQ,EAEN,CAACL,IAAD,EAAOK,IAAP,CAFM,CAAT;AAIA,QAAMK,oBAAoB,GAAGd,WAAW,CAAC,MAAM;AAC7CS,IAAAA,IAAI;AACJD,IAAAA,IAAI;AACL,GAHuC,EAGrC,CAACA,IAAD,EAAOC,IAAP,CAHqC,CAAxC;AAKA,sBACE,QAAC,OAAD;AAAS,IAAA,OAAO,EAAC,8CAAjB;AAAkC,IAAA,SAAS,EAAEJ,SAA7C;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAEK,SAArB;AAAA,SAAoCH,IAApC;AAA0C,MAAA,OAAO,EAAEO;AAAnD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAlC2C;AAAA,UACRjB,qBADQ,EAG1CI,UAH0C;AAAA,GAA5C;MAAMC,S;AAyCN,eAAeA,SAAf","sourcesContent":["import { SoundIcon, SoundIconProps } from 'components/SoundIcon'\nimport Tooltip from 'components/Tooltip'\nimport usePronunciationSound from 'hooks/usePronunciation'\nimport React, { useEffect, useCallback } from 'react'\nimport { useHotkeys } from 'react-hotkeys-hook'\n\nconst WordSound: React.FC<WordSoundProps> = React.memo(({ word, className, inputWord, ...rest }) => {\n  const { play, stop, isPlaying } = usePronunciationSound(word)\n\n  useHotkeys(\n    'ctrl+j',\n    (e) => {\n      e.preventDefault()\n      stop()\n      play()\n    },\n    [play, stop],\n  )\n\n  useEffect(() => {\n    if (inputWord.length === 0) {\n      stop()\n      play()\n    }\n  }, [play, inputWord, stop])\n\n  useEffect(() => {\n    return stop\n  }, [word, stop])\n\n  const handleClickSoundIcon = useCallback(() => {\n    stop()\n    play()\n  }, [play, stop])\n\n  return (\n    <Tooltip content=\"朗读发音（Ctrl + J）\" className={className}>\n      <SoundIcon animated={isPlaying} {...rest} onClick={handleClickSoundIcon} />\n    </Tooltip>\n  )\n})\n\nexport type WordSoundProps = {\n  word: string\n  inputWord: string\n} & SoundIconProps\n\nexport default WordSound\n"]},"metadata":{},"sourceType":"module"}