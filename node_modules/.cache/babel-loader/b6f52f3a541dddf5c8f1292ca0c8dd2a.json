{"ast":null,"code":"import hotkeys from 'hotkeys-js';\nimport { useRef, useCallback, useEffect } from 'react';\n\nfunction useIsHotkeyPressed() {\n  return hotkeys.isPressed;\n}\n\nhotkeys.filter = function () {\n  return true;\n};\n\nvar tagFilter = function tagFilter(_ref, enableOnTags) {\n  var target = _ref.target,\n      srcElement = _ref.srcElement; // @ts-ignore\n\n  var targetTagName = target && target.tagName || srcElement && srcElement.tagName;\n  return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName));\n};\n\nvar isKeyboardEventTriggeredByInput = function isKeyboardEventTriggeredByInput(ev) {\n  return tagFilter(ev, ['INPUT', 'TEXTAREA', 'SELECT']);\n};\n\nfunction useHotkeys(keys, callback, options, deps) {\n  if (options instanceof Array) {\n    deps = options;\n    options = undefined;\n  }\n\n  var _ref2 = options || {},\n      enableOnTags = _ref2.enableOnTags,\n      filter = _ref2.filter,\n      keyup = _ref2.keyup,\n      keydown = _ref2.keydown;\n\n  var ref = useRef(null);\n  var memoisedCallback = useCallback(function (keyboardEvent, hotkeysEvent) {\n    if (filter && !filter(keyboardEvent)) {\n      return false;\n    }\n\n    if (isKeyboardEventTriggeredByInput(keyboardEvent) && !tagFilter(keyboardEvent, enableOnTags)) {\n      return true;\n    }\n\n    if (ref.current === null || document.activeElement === ref.current) {\n      callback(keyboardEvent, hotkeysEvent);\n      return true;\n    }\n\n    return false;\n  }, deps ? [ref, enableOnTags, filter].concat(deps) : [ref, enableOnTags, filter]);\n  useEffect(function () {\n    if (keyup && keydown !== true) {\n      options.keydown = false;\n    }\n\n    hotkeys(keys, options || {}, memoisedCallback);\n    return function () {\n      return hotkeys.unbind(keys, memoisedCallback);\n    };\n  }, [memoisedCallback, options, keys]);\n  return ref;\n}\n\nexport { useHotkeys, useIsHotkeyPressed };","map":null,"metadata":{},"sourceType":"module"}