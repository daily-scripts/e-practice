{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/xuel/workspace/GitHub/programmer-english/src/pages/Gallery/DictionaryCard.tsx\",\n    _s = $RefreshSig$();\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect, useRef } from 'react';\nimport { useSelectedDictionary, useSetDictionary } from 'store/AppState';\n\nconst DictionaryCard = ({\n  dictionary\n}) => {\n  _s();\n\n  const buttonRef = useRef(null);\n  const selectedDictionary = useSelectedDictionary();\n  const setDictionary = useSetDictionary();\n  useEffect(() => {\n    if (selectedDictionary.id === dictionary.id && buttonRef.current !== null) {\n      var _button$parentElement, _button$parentElement2;\n\n      const button = buttonRef.current;\n      const container = (_button$parentElement = button.parentElement) === null || _button$parentElement === void 0 ? void 0 : (_button$parentElement2 = _button$parentElement.parentElement) === null || _button$parentElement2 === void 0 ? void 0 : _button$parentElement2.parentElement;\n      const halfHeight = button.getBoundingClientRect().height / 2;\n      container === null || container === void 0 ? void 0 : container.scrollTo({\n        top: Math.max(button.offsetTop - container.offsetTop - halfHeight, 0),\n        behavior: 'smooth'\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    ref: buttonRef,\n    className: \"relative p-4 w-48 bg-gray-50 dark:bg-gray-700 dark:bg-opacity-10 border border-gray-300 dark:border-gray-500 shadow-lg rounded-md text-left overflow-hidden focus:outline-none \",\n    onClick: setDictionary.bind(null, dictionary.id),\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-1 text-xl text-gray-800 dark:text-white dark:text-opacity-80\",\n      children: dictionary.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-1 text-xs text-gray-900 dark:text-white dark:text-opacity-90\",\n      children: dictionary.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm font-bold text-gray-600 dark:text-white dark:text-opacity-60\",\n      children: [dictionary.length, \" \\u8BCD\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), selectedDictionary.id === dictionary.id ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      className: \"absolute -right-4 -bottom-4 text-6xl text-green-500 dark:text-green-300 opacity-60\",\n      icon: ['fas', 'check-circle'],\n      fixedWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DictionaryCard, \"Ci7zTwOuh9kawzGRapv3ks0tPhQ=\", false, function () {\n  return [useSelectedDictionary, useSetDictionary];\n});\n\n_c = DictionaryCard;\nDictionaryCard.displayName = 'DictionaryCard';\nexport default DictionaryCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DictionaryCard\");","map":{"version":3,"sources":["/Users/xuel/workspace/GitHub/programmer-english/src/pages/Gallery/DictionaryCard.tsx"],"names":["FontAwesomeIcon","React","useEffect","useRef","useSelectedDictionary","useSetDictionary","DictionaryCard","dictionary","buttonRef","selectedDictionary","setDictionary","id","current","button","container","parentElement","halfHeight","getBoundingClientRect","height","scrollTo","top","Math","max","offsetTop","behavior","bind","name","description","length","displayName"],"mappings":";;;;;AAAA,SAASA,eAAT,QAAgC,gCAAhC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AAEA,SAASC,qBAAT,EAAgCC,gBAAhC,QAAwD,gBAAxD;;AAEA,MAAMC,cAA6C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AAAA;;AACxE,QAAMC,SAAS,GAAGL,MAAM,CAAoB,IAApB,CAAxB;AACA,QAAMM,kBAAkB,GAAGL,qBAAqB,EAAhD;AACA,QAAMM,aAAa,GAAGL,gBAAgB,EAAtC;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,kBAAkB,CAACE,EAAnB,KAA0BJ,UAAU,CAACI,EAArC,IAA2CH,SAAS,CAACI,OAAV,KAAsB,IAArE,EAA2E;AAAA;;AACzE,YAAMC,MAAM,GAAGL,SAAS,CAACI,OAAzB;AACA,YAAME,SAAS,4BAAGD,MAAM,CAACE,aAAV,oFAAG,sBAAsBA,aAAzB,2DAAG,uBAAqCA,aAAvD;AACA,YAAMC,UAAU,GAAGH,MAAM,CAACI,qBAAP,GAA+BC,MAA/B,GAAwC,CAA3D;AACAJ,MAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEK,QAAX,CAAoB;AAAEC,QAAAA,GAAG,EAAEC,IAAI,CAACC,GAAL,CAAST,MAAM,CAACU,SAAP,GAAmBT,SAAS,CAACS,SAA7B,GAAyCP,UAAlD,EAA8D,CAA9D,CAAP;AAAyEQ,QAAAA,QAAQ,EAAE;AAAnF,OAApB;AACD,KANa,CAOd;;AACD,GARQ,EAQN,EARM,CAAT;AASA,sBACE;AACE,IAAA,GAAG,EAAEhB,SADP;AAEE,IAAA,SAAS,EAAC,iLAFZ;AAGE,IAAA,OAAO,EAAEE,aAAa,CAACe,IAAd,CAAmB,IAAnB,EAAyBlB,UAAU,CAACI,EAApC,CAHX;AAAA,4BAKE;AAAG,MAAA,SAAS,EAAC,iEAAb;AAAA,gBAAgFJ,UAAU,CAACmB;AAA3F;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAG,MAAA,SAAS,EAAC,iEAAb;AAAA,gBAAgFnB,UAAU,CAACoB;AAA3F;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAG,MAAA,SAAS,EAAC,sEAAb;AAAA,iBAAqFpB,UAAU,CAACqB,MAAhG;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,EAQGnB,kBAAkB,CAACE,EAAnB,KAA0BJ,UAAU,CAACI,EAArC,gBACC,QAAC,eAAD;AACE,MAAA,SAAS,EAAC,oFADZ;AAEE,MAAA,IAAI,EAAE,CAAC,KAAD,EAAQ,cAAR,CAFR;AAGE,MAAA,UAAU;AAHZ;AAAA;AAAA;AAAA;AAAA,YADD,GAMG,IAdN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA/BD;;GAAML,c;UAEuBF,qB,EACLC,gB;;;KAHlBC,c;AAiCNA,cAAc,CAACuB,WAAf,GAA6B,gBAA7B;AAMA,eAAevB,cAAf","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React, { useEffect, useRef } from 'react'\nimport { Dictionary } from 'resources/dictionary'\nimport { useSelectedDictionary, useSetDictionary } from 'store/AppState'\n\nconst DictionaryCard: React.FC<DictionaryCardProps> = ({ dictionary }) => {\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const selectedDictionary = useSelectedDictionary()\n  const setDictionary = useSetDictionary()\n  useEffect(() => {\n    if (selectedDictionary.id === dictionary.id && buttonRef.current !== null) {\n      const button = buttonRef.current\n      const container = button.parentElement?.parentElement?.parentElement\n      const halfHeight = button.getBoundingClientRect().height / 2\n      container?.scrollTo({ top: Math.max(button.offsetTop - container.offsetTop - halfHeight, 0), behavior: 'smooth' })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  return (\n    <button\n      ref={buttonRef}\n      className=\"relative p-4 w-48 bg-gray-50 dark:bg-gray-700 dark:bg-opacity-10 border border-gray-300 dark:border-gray-500 shadow-lg rounded-md text-left overflow-hidden focus:outline-none \"\n      onClick={setDictionary.bind(null, dictionary.id)}\n    >\n      <p className=\"mb-1 text-xl text-gray-800 dark:text-white dark:text-opacity-80\">{dictionary.name}</p>\n      <p className=\"mb-1 text-xs text-gray-900 dark:text-white dark:text-opacity-90\">{dictionary.description}</p>\n      <p className=\"text-sm font-bold text-gray-600 dark:text-white dark:text-opacity-60\">{dictionary.length} ËØç</p>\n      {selectedDictionary.id === dictionary.id ? (\n        <FontAwesomeIcon\n          className=\"absolute -right-4 -bottom-4 text-6xl text-green-500 dark:text-green-300 opacity-60\"\n          icon={['fas', 'check-circle']}\n          fixedWidth\n        />\n      ) : null}\n    </button>\n  )\n}\n\nDictionaryCard.displayName = 'DictionaryCard'\n\nexport type DictionaryCardProps = {\n  dictionary: Dictionary\n}\n\nexport default DictionaryCard\n"]},"metadata":{},"sourceType":"module"}