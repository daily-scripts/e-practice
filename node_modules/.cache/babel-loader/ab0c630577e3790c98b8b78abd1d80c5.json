{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useAppState } from 'store/AppState';\nimport useSound from 'use-sound';\nimport { addHowlListener } from '../utils/utils';\nconst pronunciationApi = 'https://dict.youdao.com/dictvoice?audio=';\n\nfunction generateWordSoundSrc(word, pronunciation) {\n  switch (pronunciation) {\n    case 'uk':\n      return `${pronunciationApi}${word}&type=1`;\n\n    case 'us':\n      return `${pronunciationApi}${word}&type=2`;\n\n    case 'jap':\n      return `${pronunciationApi}${word}&le=jap`;\n  }\n}\n\nexport default function usePronunciationSound(word) {\n  _s();\n\n  const {\n    pronunciation\n  } = useAppState();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [play, {\n    stop,\n    sound\n  }] = useSound(generateWordSoundSrc(word, pronunciation), {\n    html5: true,\n    format: ['mp3']\n  });\n  useEffect(() => {\n    if (!sound) return;\n    const unListens = [];\n    unListens.push(addHowlListener(sound, 'play', () => setIsPlaying(true)));\n    unListens.push(addHowlListener(sound, 'end', () => setIsPlaying(false)));\n    unListens.push(addHowlListener(sound, 'pause', () => setIsPlaying(false)));\n    unListens.push(addHowlListener(sound, 'playerror', () => setIsPlaying(false)));\n    return () => {\n      unListens.forEach(unListen => unListen());\n      sound.unload();\n    };\n  }, [sound]);\n  return {\n    play,\n    stop,\n    isPlaying\n  };\n}\n\n_s(usePronunciationSound, \"9KQv28zk9RDTv5qfdd7bV0pXE7w=\", false, function () {\n  return [useAppState, useSound];\n});","map":{"version":3,"sources":["/Users/xuel/workspace/GitHub/programmer-english/src/hooks/usePronunciation.ts"],"names":["useEffect","useState","useAppState","useSound","addHowlListener","pronunciationApi","generateWordSoundSrc","word","pronunciation","usePronunciationSound","isPlaying","setIsPlaying","play","stop","sound","html5","format","unListens","push","forEach","unListen","unload"],"mappings":";;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAA4BC,WAA5B,QAA+C,gBAA/C;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,MAAMC,gBAAgB,GAAG,0CAAzB;;AACA,SAASC,oBAAT,CAA8BC,IAA9B,EAA4CC,aAA5C,EAA8F;AAC5F,UAAQA,aAAR;AACE,SAAK,IAAL;AACE,aAAQ,GAAEH,gBAAiB,GAAEE,IAAK,SAAlC;;AACF,SAAK,IAAL;AACE,aAAQ,GAAEF,gBAAiB,GAAEE,IAAK,SAAlC;;AACF,SAAK,KAAL;AACE,aAAQ,GAAEF,gBAAiB,GAAEE,IAAK,SAAlC;AANJ;AAQD;;AAED,eAAe,SAASE,qBAAT,CAA+BF,IAA/B,EAA6C;AAAA;;AAC1D,QAAM;AAAEC,IAAAA;AAAF,MAAoBN,WAAW,EAArC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM,CAACW,IAAD,EAAO;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP,IAA0BX,QAAQ,CAACG,oBAAoB,CAACC,IAAD,EAAOC,aAAP,CAArB,EAAiF;AACvHO,IAAAA,KAAK,EAAE,IADgH;AAEvHC,IAAAA,MAAM,EAAE,CAAC,KAAD;AAF+G,GAAjF,CAAxC;AAKAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACc,KAAL,EAAY;AAEZ,UAAMG,SAA4B,GAAG,EAArC;AAEAA,IAAAA,SAAS,CAACC,IAAV,CAAed,eAAe,CAACU,KAAD,EAAQ,MAAR,EAAgB,MAAMH,YAAY,CAAC,IAAD,CAAlC,CAA9B;AACAM,IAAAA,SAAS,CAACC,IAAV,CAAed,eAAe,CAACU,KAAD,EAAQ,KAAR,EAAe,MAAMH,YAAY,CAAC,KAAD,CAAjC,CAA9B;AACAM,IAAAA,SAAS,CAACC,IAAV,CAAed,eAAe,CAACU,KAAD,EAAQ,OAAR,EAAiB,MAAMH,YAAY,CAAC,KAAD,CAAnC,CAA9B;AACAM,IAAAA,SAAS,CAACC,IAAV,CAAed,eAAe,CAACU,KAAD,EAAQ,WAAR,EAAqB,MAAMH,YAAY,CAAC,KAAD,CAAvC,CAA9B;AAEA,WAAO,MAAM;AACXM,MAAAA,SAAS,CAACE,OAAV,CAAmBC,QAAD,IAAcA,QAAQ,EAAxC;AACEN,MAAAA,KAAD,CAAgBO,MAAhB;AACF,KAHD;AAID,GAdQ,EAcN,CAACP,KAAD,CAdM,CAAT;AAgBA,SAAO;AAAEF,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcH,IAAAA;AAAd,GAAP;AACD;;GA1BuBD,qB;UACIP,W,EAGMC,Q","sourcesContent":["import { Howl } from 'howler'\nimport { useEffect, useState } from 'react'\nimport { PronunciationType, useAppState } from 'store/AppState'\nimport useSound from 'use-sound'\nimport { HookOptions } from 'use-sound/dist/types'\nimport { addHowlListener } from '../utils/utils'\n\nconst pronunciationApi = 'https://dict.youdao.com/dictvoice?audio='\nfunction generateWordSoundSrc(word: string, pronunciation: Exclude<PronunciationType, false>) {\n  switch (pronunciation) {\n    case 'uk':\n      return `${pronunciationApi}${word}&type=1`\n    case 'us':\n      return `${pronunciationApi}${word}&type=2`\n    case 'jap':\n      return `${pronunciationApi}${word}&le=jap`\n  }\n}\n\nexport default function usePronunciationSound(word: string) {\n  const { pronunciation } = useAppState()\n  const [isPlaying, setIsPlaying] = useState(false)\n\n  const [play, { stop, sound }] = useSound(generateWordSoundSrc(word, pronunciation as Exclude<PronunciationType, false>), {\n    html5: true,\n    format: ['mp3'],\n  } as HookOptions)\n\n  useEffect(() => {\n    if (!sound) return\n\n    const unListens: Array<() => void> = []\n\n    unListens.push(addHowlListener(sound, 'play', () => setIsPlaying(true)))\n    unListens.push(addHowlListener(sound, 'end', () => setIsPlaying(false)))\n    unListens.push(addHowlListener(sound, 'pause', () => setIsPlaying(false)))\n    unListens.push(addHowlListener(sound, 'playerror', () => setIsPlaying(false)))\n\n    return () => {\n      unListens.forEach((unListen) => unListen())\n      ;(sound as Howl).unload()\n    }\n  }, [sound])\n\n  return { play, stop, isPlaying }\n}\n"]},"metadata":{},"sourceType":"module"}