{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/xuel/workspace/GitHub/programmer-english/src/components/Word/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback, useLayoutEffect } from 'react';\nimport Letter from './Letter';\nimport { isLegal, isChineseSymbol } from '../../utils/utils';\nimport useSounds from 'hooks/useSounds';\nimport style from './index.module.css';\nimport WordSound from 'components/WordSound';\nimport { useAppState } from '../../store/AppState';\nconst EXPLICIT_SPACE = '␣';\n\nconst Word = ({\n  word = 'defaultWord',\n  onFinish,\n  isStart,\n  wordVisible = true\n}) => {\n  _s();\n\n  const originWord = word;\n  word = word.replace(new RegExp(' ', 'g'), EXPLICIT_SPACE);\n  word = word.replace(new RegExp('…', 'g'), '..');\n  const [inputWord, setInputWord] = useState('');\n  const [statesList, setStatesList] = useState([]);\n  const [isFinish, setIsFinish] = useState(false);\n  const [hasWrong, setHasWrong] = useState(false);\n  const [playKeySound, playBeepSound, playHintSound] = useSounds();\n  const {\n    pronunciation\n  } = useAppState();\n  const onKeydown = useCallback(e => {\n    const char = e.key;\n\n    if (char === ' ') {\n      // 防止用户惯性按空格导致页面跳动\n      e.preventDefault();\n      setInputWord(value => value += EXPLICIT_SPACE);\n      playKeySound();\n    }\n\n    if (isChineseSymbol(char)) {\n      alert('您正在使用中文输入法输入，请关闭输入法');\n    }\n\n    if (isLegal(char) && !e.altKey && !e.ctrlKey && !e.metaKey) {\n      setInputWord(value => value += char);\n      playKeySound();\n    } else if (char === 'Backspace') setInputWord(value => value.substr(0, value.length - 1));\n  }, [playKeySound]);\n  useEffect(() => {\n    if (isStart && !isFinish) window.addEventListener('keydown', onKeydown);\n    return () => {\n      window.removeEventListener('keydown', onKeydown);\n    };\n  }, [isStart, isFinish, onKeydown]);\n  useEffect(() => {\n    if (isFinish) {\n      playHintSound();\n      onFinish();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [isFinish, hasWrong, playHintSound]);\n  useEffect(() => {\n    if (hasWrong) {\n      playBeepSound();\n      const timer = setTimeout(() => {\n        setInputWord('');\n        setHasWrong(false);\n      }, 300);\n      return () => {\n        clearTimeout(timer);\n      };\n    }\n  }, [hasWrong, isFinish, playBeepSound]);\n  useLayoutEffect(() => {\n    let hasWrong = false,\n        wordLength = word.length,\n        inputWordLength = inputWord.length;\n    const statesList = [];\n\n    for (let i = 0; i < wordLength && i < inputWordLength; i++) {\n      if (word[i] === inputWord[i]) {\n        statesList.push('correct');\n      } else {\n        hasWrong = true;\n        statesList.push('wrong');\n        setHasWrong(true);\n        break;\n      }\n    }\n\n    if (!hasWrong && inputWordLength >= wordLength) {\n      setIsFinish(true);\n    }\n\n    setStatesList(statesList);\n  }, [inputWord, word]);\n  const playWordSound = pronunciation !== false;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center pt-4 pb-1\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex items-center justify-center ${hasWrong ? style.wrong : ''}`,\n        children: word.split('').map((t, index) => {\n          return /*#__PURE__*/_jsxDEV(Letter, {\n            visible: statesList[index] === 'correct' ? true : wordVisible,\n            letter: t,\n            state: statesList[index]\n          }, `${index}-${t}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), playWordSound && /*#__PURE__*/_jsxDEV(WordSound, {\n        word: originWord,\n        inputWord: inputWord,\n        className: `${style['word-sound']}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Word, \"q+UTi06JhJEWK9KBV63Bs2aZKWw=\", false, function () {\n  return [useSounds, useAppState];\n});\n\n_c = Word;\nexport default Word;\n\nvar _c;\n\n$RefreshReg$(_c, \"Word\");","map":{"version":3,"sources":["/Users/xuel/workspace/GitHub/programmer-english/src/components/Word/index.tsx"],"names":["React","useEffect","useState","useCallback","useLayoutEffect","Letter","isLegal","isChineseSymbol","useSounds","style","WordSound","useAppState","EXPLICIT_SPACE","Word","word","onFinish","isStart","wordVisible","originWord","replace","RegExp","inputWord","setInputWord","statesList","setStatesList","isFinish","setIsFinish","hasWrong","setHasWrong","playKeySound","playBeepSound","playHintSound","pronunciation","onKeydown","e","char","key","preventDefault","value","alert","altKey","ctrlKey","metaKey","substr","length","window","addEventListener","removeEventListener","timer","setTimeout","clearTimeout","wordLength","inputWordLength","i","push","playWordSound","wrong","split","map","t","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback, useLayoutEffect } from 'react'\nimport Letter, { LetterState } from './Letter'\nimport { isLegal, isChineseSymbol } from '../../utils/utils'\nimport useSounds from 'hooks/useSounds'\nimport style from './index.module.css'\nimport WordSound from 'components/WordSound'\nimport { useAppState } from '../../store/AppState'\n\nconst EXPLICIT_SPACE = '␣'\n\nconst Word: React.FC<WordProps> = ({ word = 'defaultWord', onFinish, isStart, wordVisible = true }) => {\n  const originWord = word\n\n  word = word.replace(new RegExp(' ', 'g'), EXPLICIT_SPACE)\n  word = word.replace(new RegExp('…', 'g'), '..')\n\n  const [inputWord, setInputWord] = useState('')\n  const [statesList, setStatesList] = useState<LetterState[]>([])\n  const [isFinish, setIsFinish] = useState(false)\n  const [hasWrong, setHasWrong] = useState(false)\n  const [playKeySound, playBeepSound, playHintSound] = useSounds()\n  const { pronunciation } = useAppState()\n\n  const onKeydown = useCallback(\n    (e) => {\n      const char = e.key\n      if (char === ' ') {\n        // 防止用户惯性按空格导致页面跳动\n        e.preventDefault()\n        setInputWord((value) => (value += EXPLICIT_SPACE))\n        playKeySound()\n      }\n      if (isChineseSymbol(char)) {\n        alert('您正在使用中文输入法输入，请关闭输入法')\n      }\n      if (isLegal(char) && !e.altKey && !e.ctrlKey && !e.metaKey) {\n        setInputWord((value) => (value += char))\n        playKeySound()\n      } else if (char === 'Backspace') setInputWord((value) => value.substr(0, value.length - 1))\n    },\n    [playKeySound],\n  )\n\n  useEffect(() => {\n    if (isStart && !isFinish) window.addEventListener('keydown', onKeydown)\n\n    return () => {\n      window.removeEventListener('keydown', onKeydown)\n    }\n  }, [isStart, isFinish, onKeydown])\n\n  useEffect(() => {\n    if (isFinish) {\n      playHintSound()\n\n      onFinish()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFinish, hasWrong, playHintSound])\n\n  useEffect(() => {\n    if (hasWrong) {\n      playBeepSound()\n      const timer = setTimeout(() => {\n        setInputWord('')\n        setHasWrong(false)\n      }, 300)\n\n      return () => {\n        clearTimeout(timer)\n      }\n    }\n  }, [hasWrong, isFinish, playBeepSound])\n\n  useLayoutEffect(() => {\n    let hasWrong = false,\n      wordLength = word.length,\n      inputWordLength = inputWord.length\n    const statesList: LetterState[] = []\n\n    for (let i = 0; i < wordLength && i < inputWordLength; i++) {\n      if (word[i] === inputWord[i]) {\n        statesList.push('correct')\n      } else {\n        hasWrong = true\n        statesList.push('wrong')\n        setHasWrong(true)\n        break\n      }\n    }\n\n    if (!hasWrong && inputWordLength >= wordLength) {\n      setIsFinish(true)\n    }\n    setStatesList(statesList)\n  }, [inputWord, word])\n\n  const playWordSound = pronunciation !== false\n\n  return (\n    <div className=\"flex justify-center pt-4 pb-1\">\n      <div className=\"relative\">\n        <div className={`flex items-center justify-center ${hasWrong ? style.wrong : ''}`}>\n          {/* {console.log(inputWord, word)} */}\n          {word.split('').map((t, index) => {\n            return (\n              <Letter\n                key={`${index}-${t}`}\n                visible={statesList[index] === 'correct' ? true : wordVisible}\n                letter={t}\n                state={statesList[index]}\n              />\n            )\n          })}\n        </div>\n        {playWordSound && <WordSound word={originWord} inputWord={inputWord} className={`${style['word-sound']}`} />}\n      </div>\n    </div>\n  )\n}\n\nexport type WordProps = {\n  word: string\n  onFinish: Function\n  isStart: boolean\n  wordVisible: boolean\n}\nexport default Word\n"]},"metadata":{},"sourceType":"module"}